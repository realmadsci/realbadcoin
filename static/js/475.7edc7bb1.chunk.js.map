{"version":3,"file":"static/js/475.7edc7bb1.chunk.js","mappings":"mHAcO,MAAMA,EAAqB,cAAD,KAC7BC,KAAO,gBADsB,KAE7BC,YAAc,KAFe,KAG7BC,OAAS,EAKI,cAAC,GAIV,IAJU,KACVF,EADU,YAEVC,EAFU,OAGVC,GACD,EACC,IACI,GAAa,kBAATF,EAA0B,OAAO,KAErC,IAAIG,EAAI,IAAIJ,EAIZ,OAHAI,EAAEH,KAAOA,EACTG,EAAEF,YAAcA,EAChBE,EAAED,OAASA,EACJC,EACT,MACE,OAAO,MAKfC,UACI,IACI,MACkB,kBAAdC,KAAKL,MAGoC,MAAxCM,EAAAA,EAAAA,IAAWD,KAAKJ,aAAaM,QAG9BC,OAAOC,SAASJ,KAAKH,SACpBG,KAAKH,OAAS,EAErB,MACE,OAAO,IAOZ,MAAMQ,EAAgB,cAAD,KACxBV,KAAO,WADiB,KAExBW,QAAU,KAFc,KAGxBC,MAAQ,KAGRC,OACI,OAAOC,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,GAAOC,KAAKC,UAAUZ,KAAKM,WAMpC,cAAC,GAIV,IAJU,KACVX,EADU,QAEVW,EAFU,MAGVC,GACD,EACC,IACI,GAAa,aAATZ,EAAqB,OAAO,KAEhC,IAAIG,EAAI,IAAIO,EAIZ,OAHAP,EAAEH,KAAOA,EACTG,EAAEQ,QAAUA,EACZR,EAAES,MAAQA,EACHT,EACT,MACE,OAAO,MAKfC,UACI,IACI,MACkB,aAAdC,KAAKL,MAG8B,MAAlCM,EAAAA,EAAAA,IAAWD,KAAKO,OAAOL,QACxBF,KAAKO,QAAUP,KAAKQ,QAGH,OAAjBR,KAAKM,SACLK,KAAKC,UAAUZ,KAAKM,SAASJ,OAAS,EAE5C,MACE,OAAO,IAKZ,MAAMW,EAAoB,cAAD,KAC5BlB,KAAO,eADqB,KAE5BY,MAAQ,KAFoB,KAG5BO,SAAW,EAHiB,KAI5BlB,YAAc,KAKD,cAAC,GAKV,IALU,KACVD,EADU,MAEVY,EAFU,SAGVO,EAHU,YAIVlB,GACD,EACC,IACI,GAAa,iBAATD,EAAyB,OAAO,KAEpC,IAAIG,EAAI,IAAIe,EAKZ,OAJAf,EAAEH,KAAOA,EACTG,EAAES,MAAQA,EACVT,EAAEgB,SAAWA,EACbhB,EAAEF,YAAcA,EACTE,EACT,MACE,OAAO,MAKfC,UACI,IACI,MACkB,iBAAdC,KAAKL,MAGLQ,OAAOY,UAAUf,KAAKc,WAGa,MAAlCb,EAAAA,EAAAA,IAAWD,KAAKO,OAAOL,QAGiB,MAAxCD,EAAAA,EAAAA,IAAWD,KAAKJ,aAAaM,OAEpC,MACE,OAAO,IAMZ,MAAMc,EAAoB,cAAD,KAC5BC,OAAS,KADmB,KAE5BC,YAAc,EAFc,KAK5BC,UAAY,KALgB,KAM5BC,eAAiB,EANW,KAO5BC,OAAS,KAPmB,KAQ5BC,KAAO,KARqB,KAS5BC,UAAY,KAGZf,OACI,IAAIgB,EAASb,KAAKC,UAAU,CACxBZ,KAAKiB,OACLjB,KAAKkB,YACLlB,KAAKmB,UACLnB,KAAKoB,eACLpB,KAAKqB,SAET,OAAOZ,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,GAAOc,IAMhB,cAAC,GAQV,IARU,OACVP,EADU,YAEVC,EAFU,UAGVC,EAHU,eAIVC,EAJU,OAKVC,EALU,KAMVC,EANU,UAOVC,GACD,EACC,IACI,IAAIzB,EAAI,IAAIkB,EAcZ,OAbAlB,EAAEmB,OAASA,EACXnB,EAAEoB,YAAcA,EAChBpB,EAAEqB,UAAY,IAAIM,KAAKN,GACvBrB,EAAEsB,eAAiBA,EACnBtB,EAAEwB,KAAOA,EACTxB,EAAEyB,UAAYA,EAGdzB,EAAEuB,OACE3B,EAAoBgC,OAAOL,IAC3BhB,EAAeqB,OAAOL,IACtBR,EAAmBa,OAAOL,GAEvBvB,EACT,MACE,OAAO,MAKF,gBACT,IACI,OAEwC,MAAnCG,EAAAA,EAAAA,IAAWD,KAAKiB,QAAQf,QAGzBC,OAAOY,UAAUf,KAAKkB,cAGrBlB,KAAKmB,qBAAqBM,OAC1BE,MAAM3B,KAAKmB,UAAUS,YAGtBzB,OAAOC,SAASJ,KAAKoB,iBACpBpB,KAAKoB,gBAAkB,GAGxBpB,KAAKqB,OAAOtB,WAGsB,MAAjCE,EAAAA,EAAAA,IAAWD,KAAKsB,MAAMpB,QACtBF,KAAKQ,SAAWR,KAAKsB,MAGiB,MAAtCrB,EAAAA,EAAAA,IAAWD,KAAKuB,WAAWrB,cACtB2B,EAAAA,EAAU7B,KAAKuB,UAAWvB,KAAKsB,KAAMtB,KAAKiB,QAEtD,MACE,OAAO,GAML,WAACa,GACP9B,KAAKiB,aAAea,EAAQC,eAC5B/B,KAAKmB,UAAY,IAAIM,KACrBzB,KAAKsB,KAAOtB,KAAKQ,OACjBR,KAAKuB,WAAYd,EAAAA,EAAAA,UAAiBqB,EAAQE,KAAKhC,KAAKsB,QAhG5B,0BAoGzB,MAAMW,EAAc,cAAD,6CACtBC,SAAW,KAAKC,OAAO,IADD,KAEtBC,YAAc,EAFQ,KAGtBjB,UAAY,KAHU,KAItBkB,aAAe,GAJO,KAKtBC,aAAe,IALO,KAMtBC,kBAAoB,KANE,KAOtBC,WAAa,MAPS,KAQtBC,MAAQ,EAYJjC,WACA,MAAMkC,GAAQ,OAAG1C,KAAH,QAGd,OAAOS,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,GAAOgC,EAAW1C,KAAKyC,MAAME,aAG5B,wBAACC,GAKpB,OAFqB,IAAM,OACXC,EAAAA,EAAAA,IAAYD,GAIhCE,WAAkC,IAAzBC,EAAwB,uDAAR,MACjBP,EAAaQ,KAAKC,IAAIF,EAAe/C,KAAKwC,YAC1CU,GAAW,IAAM,MAAQC,OAAOX,GAEpC,OADgBK,EAAAA,EAAAA,IAAY7C,KAAKQ,MACd0C,EAKvBE,UAAUC,GAAe,IAAD,EACpB,IAAIH,GAAW,IAAM,MAAQC,OAAOnD,KAAKwC,YAEzCxC,KAAKmB,UAAY,IAAIM,KAAKuB,KAAKC,IAAL,UAASjD,KAAKmB,iBAAd,QAA2BM,KAAK6B,MAAO7B,KAAK6B,QAGtE,MAAMZ,GAAQ,OAAG1C,KAAH,QAEd,IAAK,IAAIuD,EAAI,EAAGA,EAAIF,EAAcE,IAAK,CAEnC,MAAM/C,GAAOC,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,GAAOgC,EAAW1C,KAAKyC,MAAME,aAErD,IADgBE,EAAAA,EAAAA,IAAYrC,GACZ0C,EACZ,OAAOlD,KAAK8C,SAAS9C,KAAKwC,YAG9BxC,KAAKyC,QAET,OAAO,EAME,cAAC,GASV,IATU,SACVP,EADU,YAEVE,EAFU,UAGVjB,EAHU,aAIVkB,EAJU,aAKVC,EALU,kBAMVC,EANU,WAOVC,EAPU,MAQVC,GACD,EACC,IACI,IAAI3C,EAAI,IAAImC,EAYZ,OAXAnC,EAAEoC,SAAWA,EACbpC,EAAEsC,YAAcA,EAChBtC,EAAEqB,UAAY,IAAIM,KAAKN,GACvBrB,EAAEuC,aAAeA,EAAamB,KAAKC,GACxBzC,EAAmBU,OAAO+B,KAErC3D,EAAEwC,aAAeA,EACjBxC,EAAEyC,kBAAoBA,EACtBzC,EAAE0C,WAAaA,EACf1C,EAAE2C,MAAQA,EAEH3C,EACT,MAAO4D,GAEL,OADAC,QAAQD,MAAMA,GACP,MAQF,gBAA0B,IAAzBX,EAAwB,uDAAR,MAC1B,IACI,OAII/C,KAAK8C,SAASC,IAK2B,MAArC9C,EAAAA,EAAAA,IAAWD,KAAKkC,UAAUhC,QAG3BC,OAAOY,UAAUf,KAAKoC,cACtBpC,KAAKoC,aAAe,IAInBpC,KAAKoC,YAAc,GAClBpC,KAAKkC,WAAa,KAAKC,OAAO,MAI/BnC,KAAKmB,qBAAqBM,OAC1BE,MAAM3B,KAAKmB,UAAUS,YAGtBgC,MAAMC,QAAQ7D,KAAKqC,qBAlY/ByB,eAA0BC,EAAKC,GACrC,IAAK,IAAIC,KAAKF,EACb,UAAWC,EAAUC,GAAI,OAAO,EAEjC,OAAO,EA+XiBC,CAAWlE,KAAKqC,cAAcyB,MAAAA,GAC3BL,aAAazC,SAA6ByC,EAAE1D,aAIrDI,OAAOC,SAASJ,KAAKsC,eACpBtC,KAAKsC,cAAgB,GAGyB,MAA9CrC,EAAAA,EAAAA,IAAWD,KAAKuC,mBAAmBrC,OAE7C,MACE,OAAO,IA/IO,aAYlB,MAAM,MAACuC,KAAU0B,GAAoB,IAAInE,MACzC,OAAOS,EAAAA,EAAAA,KAAWC,EAAAA,EAAAA,GAAOC,KAAKC,UAAUuD,KC3QzC,MAAMC,EAAqB,cAAD,KAC7BC,QAAU,EADmB,KAE7B5B,MAAQ,EAEK,cAAC,GAGV,IAHU,QACV4B,EADU,MAEV5B,GACD,EACK3C,EAAI,IAAIsE,EAGZ,OAFAtE,EAAEuE,QAAUA,EACZvE,EAAE2C,MAAQA,EACH3C,GAIR,MAAMwE,EAAiB,cAAD,KACzBC,MAAQ,KADiB,KAEzB9B,MAAQ,EAEK,cAAC,GAGV,IAHU,MACV8B,EADU,MAEV9B,GACD,EACK3C,EAAI,IAAIwE,EAGZ,OAFAxE,EAAEyE,MAAQA,EACVzE,EAAE2C,MAAQA,EACH3C,GAKR,MAAM0E,EAKTC,YAAYC,EAASC,EAAaC,GAAgB,KAJlDF,QAAU,GAIuC,KAHjDC,YAAc,KAGmC,KAFjDC,cAAgB,KAGZ5E,KAAK0E,QAAUA,EACf1E,KAAK2E,YAAcA,EACnB3E,KAAK4E,cAAgBA,EAGzBjC,WACI,OAA2B,OAAvB3C,KAAK4E,cACE,sBAAwB5E,KAAK4E,cAAcjC,WAAa,MAAQ3C,KAAK0E,QAAU,KAAO1E,KAAK2E,YAAYhC,WAEvG,qBAAuB3C,KAAK0E,QAAU,KAAO1E,KAAK2E,YAAYhC,YAK1E,MAAMkC,EAITJ,YAAYC,EAASI,GAAY,KAHjCJ,QAAU,GAGsB,KAFhCI,UAAY,GAGR9E,KAAK0E,QAAUA,EACf1E,KAAK8E,UAAYA,EAGrBnC,WACE,MAAO,aAAe3C,KAAK8E,UAAUnC,WAAa,MAAQ3C,KAAK0E,SAI9D,MAAMK,UAA2BF,EAGpCJ,YAAYC,EAASI,EAAWE,GAC5BC,MAAMP,EAASI,GAD6B,KAFhDE,oBAEgD,EAE5ChF,KAAKgF,eAAiB,IAAIvD,KAAKuD,IAKhC,MAAME,EA0BTT,cAAsC,IAA1BU,EAAyB,uDAAL,IAAK,KAzBrCC,SAAW,GAyB0B,KAxBrCC,KAAO,GAwB8B,KAvBrCC,gBAAkB,EAuBmB,KApBrCV,cAAgB,KAAKzC,OAAO,IAoBS,KAnBrCoD,iBAAmB,EAmBkB,KAhBrCC,oBAAsB,KAgBe,KAfrCC,mBAAqB,KAegB,KAXrCC,gBAAkB,GAWmB,KAPrCC,OAAS,GAO4B,KAHrCC,SAAW,GAIP5F,KAAKwF,oBAAsBL,EAGlB,cAAC,GAWV,IAXU,SACVC,EADU,KAEVC,EAFU,gBAGVC,EAHU,cAIVV,EAJU,gBAKVW,EALU,oBAMVC,EANU,mBAOVC,EAPU,gBAQVC,EARU,OASVC,EATU,SAUVC,GACD,EACK9F,EAAI,IAAIoF,EAyBZ,OAxBAW,OAAOC,KAAKV,GAAUW,SAAQC,IAC1BlG,EAAEsF,SAASY,GAAK5B,EAAoB1C,OAAO0D,EAASY,OAExDH,OAAOC,KAAKT,GAAMU,SAAQC,IACtBlG,EAAEuF,KAAKW,GAAK1B,EAAgB5C,OAAO2D,EAAKW,OAE5ClG,EAAEwF,gBAAkBA,EACpBxF,EAAE8E,cAAgBA,EAClB9E,EAAEyF,gBAAkBA,EACpBzF,EAAE0F,oBAAsBA,EACxB1F,EAAE2F,mBAAqB,IAAIhE,KAAKgE,GAChC3F,EAAE4F,gBAAkBvC,OAAOuC,GAC3B5F,EAAE6F,OAASA,EAAOnC,KAAIS,GACf,mBAAoBA,EACZ,IAAIc,EAAmBd,EAAES,QAAST,EAAEa,UAAWb,EAAEe,gBAEnD,cAAef,EACb,IAAIY,EAAoBZ,EAAES,QAAST,EAAEa,WAGrC,IAAIN,EAA0BP,EAAES,QAAST,EAAEU,YAAaV,EAAEW,iBAGzE9E,EAAE8F,SAAWA,EACN9F,EAIXmG,SACI,MAAO,CACHb,SAAUpF,KAAKoF,SACfC,KAAMrF,KAAKqF,KACXC,gBAAiBtF,KAAKsF,gBACtBV,cAAe5E,KAAK4E,cACpBW,gBAAiBvF,KAAKuF,gBACtBC,oBAAqBxF,KAAKwF,oBAC1BC,mBAAoBzF,KAAKyF,mBACzBC,gBAAiB1F,KAAK0F,gBAAgB/C,WACtCgD,OAAQ3F,KAAK2F,OACbC,SAAU5F,KAAK4F,UAKvBM,QACI,OAAOhB,EAAmBxD,OAAO1B,MAMrCmG,eAAe1C,GAEX,KAFsD,0DAExBA,EAAEtC,UAAYnB,KAAKyF,mBAAqB,MAAM,IAAIjB,EAA0B,uDAAwDf,EAAGzD,KAAK4E,eAE1K,GAAInB,EAAEpC,kBAAkB3B,EAAqB,CACzC,KAAM+D,EAAExC,UAAUjB,KAAKoF,UAAW,MAAM,IAAIZ,EAA0B,gDAAiDf,EAAGzD,KAAK4E,eAC/H,GAAInB,EAAEvC,cAAgBlB,KAAKoF,SAAS3B,EAAExC,QAAQwB,MAAQ,EAAG,MAAM,IAAI+B,EAA0B,kBAAmBf,EAAGzD,KAAK4E,eACxH,GAAInB,EAAEpC,OAAOxB,OAAS4D,EAAErC,eAAiBpB,KAAKoF,SAAS3B,EAAExC,QAAQoD,QAAS,MAAM,IAAIG,EAA0B,uBAAwBf,EAAGzD,KAAK4E,eAG9I5E,KAAKoF,SAAS3B,EAAExC,QAAQwB,QACxBzC,KAAKoF,SAAS3B,EAAExC,QAAQoD,SAAWZ,EAAEpC,OAAOxB,OAAS4D,EAAErC,eAGvDpB,KAAKsF,iBAAmB7B,EAAErC,eACpBqC,EAAEpC,OAAOzB,eAAeI,KAAKoF,WAAWpF,KAAKoF,SAAS3B,EAAEpC,OAAOzB,aAAe,IAAIwE,GACxFpE,KAAKoF,SAAS3B,EAAEpC,OAAOzB,aAAayE,SAAWZ,EAAEpC,OAAOxB,YAEvD,GAAI4D,EAAEpC,kBAAkBhB,EAAgB,CAEzC,GAAIoD,EAAEpC,OAAOd,SAASP,KAAKqF,KAAM,MAAM,IAAIb,EAA0B,gDAAiDf,EAAGzD,KAAK4E,eAI9H,GAAInB,EAAErC,eAAiB,EAAG,CACtB,KAAMqC,EAAExC,UAAUjB,KAAKoF,UAAW,MAAM,IAAIZ,EAA0B,wDAAyDf,EAAGzD,KAAK4E,eACvI,GAAInB,EAAEvC,cAAgBlB,KAAKoF,SAAS3B,EAAExC,QAAQwB,MAAQ,EAAG,MAAM,IAAI+B,EAA0B,qCAAsCf,EAAGzD,KAAK4E,eAC3I,GAAInB,EAAErC,eAAiBpB,KAAKoF,SAAS3B,EAAExC,QAAQoD,QAAS,MAAM,IAAIG,EAA0B,0CAA2Cf,EAAGzD,KAAK4E,eAG/InB,EAAErC,eAAiB,IAEnBpB,KAAKoF,SAAS3B,EAAExC,QAAQwB,QACxBzC,KAAKoF,SAAS3B,EAAExC,QAAQoD,SAAWZ,EAAErC,eAGrCpB,KAAKsF,iBAAmB7B,EAAErC,gBAI9B,IAAIgF,EAAM,IAAI9B,EACd8B,EAAI3D,MAAQ,EACZ2D,EAAI7B,MAAQd,EAAExC,OACdjB,KAAKqF,KAAK5B,EAAEpC,OAAOd,OAAS6F,OAE3B,GAAI3C,EAAEpC,kBAAkBR,EAAoB,CAC7C,IAAIwF,EAAQ5C,EAAEpC,OAAOd,MACrB,KAAM8F,KAASrG,KAAKqF,MAAO,MAAM,IAAIb,EAA0B,gDAAiDf,EAAGzD,KAAK4E,eACxH,GAAI5E,KAAKqF,KAAKgB,GAAO9B,QAAUd,EAAExC,OAAQ,MAAM,IAAIuD,EAA0B,6CAA8Cf,EAAGzD,KAAK4E,eACnI,GAAInB,EAAEpC,OAAOP,WAAad,KAAKqF,KAAKgB,GAAO5D,MAAQ,EAAG,MAAM,IAAI+B,EAA0B,sBAAuBf,EAAGzD,KAAK4E,eAIzH,GAAInB,EAAErC,eAAiB,EAAG,CACtB,KAAMqC,EAAExC,UAAUjB,KAAKoF,UAAW,MAAM,IAAIZ,EAA0B,wDAAyDf,EAAGzD,KAAK4E,eACvI,GAAInB,EAAEvC,cAAgBlB,KAAKoF,SAAS3B,EAAExC,QAAQwB,MAAQ,EAAG,MAAM,IAAI+B,EAA0B,qCAAsCf,EAAGzD,KAAK4E,eAC3I,GAAInB,EAAErC,eAAiBpB,KAAKoF,SAAS3B,EAAExC,QAAQoD,QAAS,MAAM,IAAIG,EAA0B,0CAA2Cf,EAAGzD,KAAK4E,eAG/InB,EAAErC,eAAiB,IAEnBpB,KAAKoF,SAAS3B,EAAExC,QAAQwB,QACxBzC,KAAKoF,SAAS3B,EAAExC,QAAQoD,SAAWZ,EAAErC,eAGrCpB,KAAKsF,iBAAmB7B,EAAErC,gBAI9BpB,KAAKqF,KAAKgB,GAAO5D,QACjBzC,KAAKqF,KAAKgB,GAAO9B,MAAQd,EAAEpC,OAAOzB,aAO1C0G,WAAWC,GACP,MAAM/F,EAAO+F,EAAM/F,KAEnB,IAAIgG,EAAIxG,KAAKkG,QACbM,EAAEZ,SAAW,GAKR5F,KAAK4F,SAASa,SAASjG,IAAOR,KAAK4F,SAASc,KAAKlG,GAGlD+F,EAAMrE,WAAalC,KAAK4E,eAAe4B,EAAEb,OAAOe,KAAK,IAAI7B,EAAoB,gDAAiDrE,IAC9H+F,EAAMnE,cAAgBpC,KAAKuF,gBAAkB,GAAGiB,EAAEb,OAAOe,KAAK,IAAI7B,EAAoB,0CAA2CrE,IACjI+F,EAAMpF,UAAY,IAAIM,KAAKA,KAAK6B,MAAQ,MAASkD,EAAEb,OAAOe,KAAK,IAAI3B,EAAmB,sCAAuCvE,EAAM+F,EAAMpF,YAClH,IAAtBoF,EAAMnE,aAAuBmE,EAAMpF,UAAYnB,KAAKyF,oBAAqBe,EAAEb,OAAOe,KAAK,IAAI7B,EAAoB,6DAA8DrE,IAElLgG,EAAE5B,cAAgBpE,EAClBgG,EAAEjB,gBAAkBgB,EAAMnE,YAC1B,IAAIuE,EAAwC,IAAtBJ,EAAMnE,YAAqB,EAAIY,KAAKC,IAAI,EAAGsD,EAAMpF,UAAYnB,KAAKyF,oBAexF,GAdAe,EAAEf,mBAAqBc,EAAMpF,UAK7BqF,EAAEd,gBAAkB1F,KAAK0F,gBAAkBzD,EAAa2E,iBAAiBJ,EAAE5B,eAGvE2B,EAAM/D,WAAaxC,KAAKwF,qBAAqBgB,EAAEb,OAAOe,KAAK,IAAI7B,EAAoB,uCAAwCrE,IAMrG,IAAtB+F,EAAMnE,YAENoE,EAAEhB,oBAAsBxF,KAAKwF,wBAE5B,CACD,IAAIqB,EAAaF,EAAc,KAI/BE,EAAa7D,KAAK8D,IAAI,EAAGD,GACzB,MAAME,EAAI,GACVP,EAAEhB,oBAAsBxC,KAAKgE,MAAMhH,KAAKwF,qBAAuB,GAAK,EAAIqB,GAAcE,IAK1F,IACIR,EAAMlE,aAAa0D,SAAQtC,IACvB+C,EAAEL,eAAe1C,MAEvB,MAAOC,GACL8C,EAAEb,OAAOe,KAAKhD,GAYlB,OARM6C,EAAMhE,qBAAqBiE,EAAEpB,WAAWoB,EAAEpB,SAASmB,EAAMhE,mBAAqB,IAAI6B,GACxFoC,EAAEpB,SAASmB,EAAMhE,mBAAmB8B,SAAWkC,EAAMjE,aAAekE,EAAElB,gBAGtEkB,EAAElB,gBAAkB,EAEhBkB,EAAEb,OAAOzF,QAAQyD,QAAQD,MAAM,mBAAqB6C,EAAMnE,YAAc,KAAOzB,KAAKC,UAAU4F,EAAEb,SAE7Fa,GAMR,MAAMS,EAAc,cAAD,KACtBC,QAAU,GADY,KAEtBC,mBAAqB,GAFC,KAGtBC,aAAe,GAHO,KAItBC,WAAa,KAJS,KAKtBC,QAAU,GALY,KAMtBC,mBAAqB,GANC,KAOtBC,gBAAkB,KAPI,KAQtBzE,cAAgB,MARM,KAStBoC,kBAAoB,IAGN,eAACoB,EAAOtF,GAA2C,IAAnC8B,EAAkC,uDAApB/C,KAAK+C,cAC7C,IACI,IAAIvC,EAAO+F,EAAM/F,KACjB,GAEK+F,aAAiBtE,SACTsE,EAAMxG,QAAQgD,MAGlBvC,KAAQR,KAAKkH,SACpB,CAQE,GANAlH,KAAKkH,QAAQ1G,GAAQ,CACjB+F,MAAOA,EACPtF,OAAQA,GAIe,IAAtBsF,EAAMnE,aAAwBmE,EAAMrE,YAAYlC,KAAKkH,SAAa,UAAWlH,KAAKkH,QAAQX,EAAMrE,UAAa,CAM9G,GAA0B,IAAtBqE,EAAMnE,YAAmB,CACzB,MAAMqF,EAAezH,KAAK0H,SAASnB,EAAMrE,UAAUyD,OACnD,IAAI,IAAI1B,KAAKwD,EAET,GAAIxD,aAAac,GACTd,EAAEe,gBAAkB,IAAIvD,KAAKA,KAAK6B,MAAQ,KAAS,CAEnDtD,KAAKoH,aAAe,CAACnD,EAAEa,WAAW6C,OAAO3H,KAAK4H,SAASrB,EAAMrE,SAAU+B,EAAEa,YAGzE,OAMhB9E,KAAKoH,aAAaV,KAAKlG,QAKjB+F,EAAMrE,YAAYlC,KAAKmH,qBAAqBnH,KAAKmH,mBAAmBZ,EAAMrE,UAAY,IAC5FlC,KAAKmH,mBAAmBZ,EAAMrE,UAAUwE,KAAKlG,GAEzCR,KAAKoH,aAAalH,QAAQyD,QAAQD,MAAM,oDAAsD1D,KAAKoH,aAAalH,QAMxH,KAAOF,KAAKoH,aAAalH,QAAQ,CAC7B,IAAI2H,EAAI7H,KAAK8H,SAAS9H,KAAKoH,aAAaW,SACpCnF,EAAIiF,EAAErH,KAEY,IAAlBqH,EAAEzF,YAEFpC,KAAKkH,QAAQtE,GAAGoF,MAAS,IAAI9C,EAAmBlF,KAAKmF,mBAAoBmB,WAAWuB,GAKpF7H,KAAKkH,QAAQtE,GAAGoF,MAAQhI,KAAKkH,QAAQW,EAAE3F,UAAU8F,MAAM1B,WAAWuB,GAIlEjF,KAAK5C,KAAKmH,qBACVnH,KAAKoH,aAAepH,KAAKoH,aAAaO,OAAO3H,KAAKmH,mBAAmBvE,WAC9D5C,KAAKmH,mBAAmBvE,IAOnC,IAAIqF,EAAYjI,KAAK0H,SAAS9E,GAC9B,GAAgC,IAA5BqF,EAAUtC,OAAOzF,OAAc,CAC/B,IAAIgI,EAAYlI,KAAK0H,SAAS1H,KAAKqH,aAEhB,OAAda,GACAD,EAAUvC,gBAAkBwC,EAAUxC,mBAEvC1F,KAAKqH,WAAazE,IAI9B,OAAO,GAEb,MAAOc,GAEL,OADAC,QAAQD,MAAMA,IACP,GAOfyE,kBAAkB5B,EAAOyB,GAErBhI,KAAKqH,WAAad,EAAM/F,KACxBR,KAAKkH,QAAQlH,KAAKqH,YAAc,CAC5Bd,MAAOA,EACPyB,MAAOA,GAKXI,oBACA,OAAOpI,KAAKqH,WAGhBS,SAAStH,GACL,OAAIA,KAAQR,KAAKkH,QACNlH,KAAKkH,QAAQ1G,GAAM+F,MAEvB,KAGX8B,UAAU7H,GACN,OAAIA,KAAQR,KAAKkH,QACNlH,KAAKkH,QAAQ1G,GAAMS,OAEvB,KAGXyG,SAASlH,GACL,OAAKA,KAAQR,KAAKkH,SAAa,UAAWlH,KAAKkH,QAAQ1G,GAC5CR,KAAKkH,QAAQ1G,GAAMwH,MAEvB,KAOXJ,SAASpH,GAA0C,IAApC8H,EAAmC,uDAA1B,KAAMC,EAAoB,uDAAVC,EAAAA,EAChCC,EAAQ,GACRC,EAAQ,OAAGlI,QAAH,IAAGA,EAAAA,EAAQR,KAAKoI,cACxBO,EAAY3I,KAAK8H,SAASY,GAE9B,KAAQA,IAAaJ,GAA4B,OAAdK,GAAwBF,EAAMvI,OAASqI,IACtEE,EAAMG,QAAQF,GAGgB,IAA1BC,EAAUvG,cAEdsG,EAAWC,EAAUzG,SACrByG,EAAY3I,KAAK8H,SAASY,GAG9B,OAAOD,EAMXI,iBAAiBrI,GAAO,IAAD,EAEnB,GAAIA,IAASR,KAAKoI,cAAe,OAAO,EAExC,MAAMK,EAAQzI,KAAK4H,SAAS,KAAMpH,GAC5BsI,EAAW,UAAG9I,KAAK8H,SAASW,EAAM,WAAvB,aAAG,EAAyBvG,SAC7C,OAAIuG,EAAMvI,QAAW4I,IAAgBtI,EAAc,EAAIiI,EAAMvI,OACjD,EAKI,qBAAC6I,GACjB,IACI,GAEKA,aAAc/H,SACN+H,EAAGhJ,WAORgJ,EAAG5H,UAAY,IAAIM,KAAKA,KAAK6B,MAAQ,MACrC7B,KAAK6B,MAAQyF,EAAG5H,UAAY,OAG3B4H,EAAGzH,QAAQtB,KAAKsH,YAChByB,EAAGzH,QAAQtB,KAAKuH,oBAIrB,OADAvH,KAAKsH,QAAQyB,EAAGzH,MAAQyH,GACjB,EAEb,MAAOrF,GAEL,OADAC,QAAQD,MAAMA,IACP,GAMfsF,kBAAkBC,EAAQrJ,GAAc,IAAD,QACnC,IAAIsC,EAAQ,UAAGlC,KAAKoI,qBAAR,QAAyB,KAAKjG,OAAO,IAEjD,GAAInC,KAAKwH,kBAAoBtF,EAAU,CAKnC,IAAIgH,EAAWlJ,KAAK4H,SAAS5H,KAAKwH,iBAC9B2B,EAAWnJ,KAAK4H,SAAS1F,GAGzBkH,EAAgBF,EAASG,QAAO,CAACxB,EAAGtE,KAAK4F,EAAS1C,SAASoB,KAC/DuB,EAAcrD,SAAQnD,IACV5C,KAAK8H,SAASlF,GACpBP,aAAa0D,SAAQtC,IAGnBzD,KAAKsH,QAAQ7D,EAAEnC,MAAQmC,SAGhBzD,KAAKuH,mBAAmB9D,EAAEnC,YAKzC,IAAIgI,EAAcH,EAASE,QAAO,CAACxB,EAAGtE,KAAK2F,EAASzC,SAASoB,KAC7DyB,EAAYvD,SAAQnD,IACR5C,KAAK8H,SAASlF,GACpBP,aAAa0D,SAAQtC,IAGdA,EAAEtC,UAAY,IAAIM,KAAKA,KAAK6B,MAAQ,MACjC7B,KAAK6B,MAAQG,EAAEtC,UAAY,MAE/BnB,KAAKuH,mBAAmB9D,EAAEnC,MAAQmC,UAI/BzD,KAAKsH,QAAQ7D,EAAEnC,YAK9BtB,KAAKwH,gBAAkBtF,EAK3B,IAAIqH,EAAYvJ,KAAK8H,SAAS5F,GAC1BsH,EAAc,UAAGxJ,KAAK0H,SAASxF,UAAjB,QAA8B,IAAIgD,EAAmBlF,KAAKmF,mBACxEsE,EAAU,iBAAGF,QAAH,IAAGA,OAAH,EAAGA,EAAWnH,mBAAd,SAA8B,EAExCyF,EAAI,IAAI5F,EACZ4F,EAAE3F,SAAWA,EACb2F,EAAEzF,YAAcqH,EAAa,EAC7B5B,EAAErF,WAAagH,EAAehE,oBAC9BqC,EAAEvF,aAAe2G,EACjBpB,EAAEtF,kBAAoB3C,EAGtBiI,EAAE1G,UAAY,IAAIM,KAAKtB,OAAM,iBAACoJ,QAAD,IAACA,OAAD,EAACA,EAAWpI,iBAAZ,QAAyBM,KAAK6B,OAAS,GAGpE,IAAIkD,EAAIgD,EAAetD,QACnBwD,EAAW,GACf,IAAK,MAAMpI,KAAQtB,KAAKsH,QACpBoC,EAAShD,KAAKpF,GAMlB,OAAa,CACT,IAAIqI,EAAkB,GAatB,GAZAD,EAAS3D,SAAQzE,IACb,IACIkF,EAAEL,eAAenG,KAAKsH,QAAQhG,IAC9BqI,EAAgBjD,KAAKpF,GACvB,MAAOoC,GACL,KAAMA,aAAiBc,GACnB,MAAMd,MAMa,IAA3BiG,EAAgBzJ,OAAc,MAGlC2H,EAAExF,aAAewF,EAAExF,aAAasF,OAAOgC,EAAgBnG,KAAIlC,GAAMtB,KAAKsH,QAAQhG,MAG9EoI,EAAWA,EAASL,QAAO,CAAC/H,EAAMiC,KAAKoG,EAAgBlD,SAASnF,KAEpE,OAAOuG,G,uBC1iBf+B,EAAAA,GAtEA,MAAmB,cAAD,gDACL,IAAI3C,IAGC,eAACV,EAAOtF,GAClB,IAAI4G,EAAI5F,EAAaP,OAAO6E,GAC5B,aAAa,OAAAvG,KAAA,MAAY6J,SAAShC,EAAG5G,GAI1B,gBAAC6I,EAAW7I,GACvB,IAAI8I,GAAU,EACd,IAAK,IAAIlC,KAAKiC,EAEVC,QAAgB/J,KAAK6J,SAAShC,EAAG5G,IAAW8I,EAEhD,OAAOA,EAGX5B,kBAAkB5B,EAAOyB,IACrB,OAAAhI,KAAA,MAAYmI,kBACRlG,EAAaP,OAAO6E,GACpBrB,EAAmBxD,OAAOsG,IAKlCgC,aAAaxJ,GACT,MAAO,CACH+F,OAAO,OAAAvG,KAAA,MAAY8H,SAAStH,GAC5BwH,OAAO,OAAAhI,KAAA,MAAY0H,SAASlH,GAC5BS,QAAQ,OAAAjB,KAAA,MAAYqI,UAAU7H,IAKtCyJ,UAAUC,GACN,OAAOA,EAAS1G,KAAI,CAACZ,EAAGW,KAAI,OAAAvD,KAAA,MAAY8H,SAASlF,KAMrDgF,SAASpH,GAA0C,IAApC8H,EAAmC,uDAA1B,KAAMC,EAAoB,uDAAVC,EAAAA,EACpC,OAAO,OAAAxI,KAAA,MAAY4H,SAASpH,EAAM8H,EAAUC,GAKhDM,iBAAiBrI,GACb,OAAO,OAAAR,KAAA,MAAY6I,iBAAiBrI,GAIpC4H,oBACA,OAAO,OAAApI,KAAA,MAAYoI,cAKH,qBAACzD,GACjB,IAAIoE,EAAK/H,EAAmBU,OAAOiD,GACnC,aAAa,OAAA3E,KAAA,MAAYmK,eAAepB,GAG5CC,kBAAkBC,EAAQrJ,GACtB,OAAO,OAAAI,KAAA,MAAYgJ,kBAAkBC,EAAQrJ,O,aC/EjDwK,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,IAOV,OAHAE,EAAoBL,GAAUI,EAAQA,EAAOD,QAASJ,GAG/CK,EAAOD,QAIfJ,EAAoBO,EAAID,EAGxBN,EAAoBQ,EAAI,KAGvB,IAAIC,EAAsBT,EAAoBU,OAAEP,EAAW,CAAC,MAAM,IAAOH,EAAoB,QAE7F,OADAS,EAAsBT,EAAoBU,EAAED,I,MChC7C,IAAIE,EAAW,GACfX,EAAoBU,EAAI,CAACE,EAAQC,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAe7C,EAAAA,EACnB,IAASjF,EAAI,EAAGA,EAAIyH,EAAS9K,OAAQqD,IAAK,CAGzC,IAFA,IAAK2H,EAAUC,EAAIC,GAAYJ,EAASzH,GACpC+H,GAAY,EACPC,EAAI,EAAGA,EAAIL,EAAShL,OAAQqL,MACpB,EAAXH,GAAsBC,GAAgBD,IAAavF,OAAOC,KAAKuE,EAAoBU,GAAGS,OAAOC,GAASpB,EAAoBU,EAAEU,GAAKP,EAASK,MAC9IL,EAASQ,OAAOH,IAAK,IAErBD,GAAY,EACTF,EAAWC,IAAcA,EAAeD,IAG7C,GAAGE,EAAW,CACbN,EAASU,OAAOnI,IAAK,GACrB,IAAIzD,EAAIqL,SACEX,IAAN1K,IAAiBmL,EAASnL,IAGhC,OAAOmL,EAvBNG,EAAWA,GAAY,EACvB,IAAI,IAAI7H,EAAIyH,EAAS9K,OAAQqD,EAAI,GAAKyH,EAASzH,EAAI,GAAG,GAAK6H,EAAU7H,IAAKyH,EAASzH,GAAKyH,EAASzH,EAAI,GACrGyH,EAASzH,GAAK,CAAC2H,EAAUC,EAAIC,K,GCJ/Bf,EAAoBsB,EAAI,CAAClB,EAASmB,KACjC,IAAI,IAAIH,KAAOG,EACXvB,EAAoBwB,EAAED,EAAYH,KAASpB,EAAoBwB,EAAEpB,EAASgB,IAC5E5F,OAAOiG,eAAerB,EAASgB,EAAK,CAAEM,YAAY,EAAMC,IAAKJ,EAAWH,MCJ3EpB,EAAoB4B,EAAI,GAGxB5B,EAAoBpG,EAAKiI,GACjBC,QAAQC,IAAIvG,OAAOC,KAAKuE,EAAoB4B,GAAGI,QAAO,CAACC,EAAUb,KACvEpB,EAAoB4B,EAAER,GAAKS,EAASI,GAC7BA,IACL,KCNJjC,EAAoBkC,EAAKL,GAEjB,aAAeA,EAAf,qBCFR7B,EAAoBmC,SAAYN,MCDhC7B,EAAoBwB,EAAI,CAACY,EAAKC,IAAU7G,OAAO8G,UAAUC,eAAeC,KAAKJ,EAAKC,GCAlFrC,EAAoByC,EAAI,I,MCIxB,IAAIC,EAAkB,CACrB,IAAK,GAgBN1C,EAAoB4B,EAAE1I,EAAI,CAAC2I,EAASI,KAE/BS,EAAgBb,IAElBc,cAAc3C,EAAoByC,EAAIzC,EAAoBkC,EAAEL,KAK/D,IAAIe,EAAqBC,KAA8B,wBAAIA,KAA8B,yBAAK,GAC1FC,EAA6BF,EAAmBvG,KAAK0G,KAAKH,GAC9DA,EAAmBvG,KAvBC2G,IACnB,IAAKnC,EAAUoC,EAAaC,GAAWF,EACvC,IAAI,IAAI/C,KAAYgD,EAChBjD,EAAoBwB,EAAEyB,EAAahD,KACrCD,EAAoBO,EAAEN,GAAYgD,EAAYhD,IAIhD,IADGiD,GAASA,EAAQlD,GACda,EAAShL,QACd6M,EAAgB7B,EAASsC,OAAS,EACnCL,EAA2BE,K,SCnB5B,IAAII,EAAOpD,EAAoBQ,EAC/BR,EAAoBQ,EAAI,IAChBR,EAAoBpG,EAAE,KAAKyJ,KAAKD,I,GCDdpD,EAAoBQ,K","sources":["util/RealBadCoin.tsx","util/RealBadState.tsx","util/CacheWorker.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["// Data strucures and accessors for the RealBadCoin crypto currency\r\n\r\nimport * as ed from '@noble/ed25519';\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { bytesToHex, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\r\nimport { hexToBigint } from 'bigint-conversion';\r\n\r\nexport async function asyncEvery(arr, predicate) {\r\n\tfor (let e of arr) {\r\n\t\tif (!await predicate(e)) return false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nexport class RealBadCoinTransfer {\r\n    type = \"coin_transfer\";\r\n    destination = null; // Destination account ID (public key)\r\n    amount = 0;         // Amount of RealBadCoin to transfer (floating point number)\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        type,\r\n        destination,\r\n        amount,\r\n    }) {\r\n        try {\r\n            if (type !== \"coin_transfer\") return null;\r\n\r\n            let r = new RealBadCoinTransfer();\r\n            r.type = type;\r\n            r.destination = destination;\r\n            r.amount = amount;\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the all fields have correct data types\r\n    isValid() {\r\n        try {\r\n            return (\r\n                this.type === \"coin_transfer\" &&\r\n\r\n                // The destination is a 32-byte hex value\r\n                (hexToBytes(this.destination).length === 32) &&\r\n\r\n                // The amount is a finite positive number\r\n                Number.isFinite(this.amount) &&\r\n                (this.amount > 0)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// Create a new NFT. The \"source\" account is the owner of the NFT until it is transferred via a RealBadNftTransfer.\r\n// NOTE: These aren't free - like all transactions, you have to pay a miner's fee to make one!\r\nexport class RealBadNftMint {\r\n    type = \"nft_mint\";\r\n    nftData = null;     // Any data we want to \"mint\" as an NFT. Can be a string, and object, whatever...\r\n    nftId = null;       // The ID (hash) of the `nftData` object. Must a globally unique number on the block chain (so nftData must be unique).\r\n\r\n    // Compute the hash (txId) of this object\r\n    hash() {\r\n        return bytesToHex(sha256(JSON.stringify(this.nftData)));\r\n    }\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        type,\r\n        nftData,\r\n        nftId,\r\n    }) {\r\n        try {\r\n            if (type !== \"nft_mint\") return null;\r\n\r\n            let r = new RealBadNftMint();\r\n            r.type = type;\r\n            r.nftData = nftData;\r\n            r.nftId = nftId;\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the all fields have correct data types\r\n    isValid() {\r\n        try {\r\n            return (\r\n                this.type === \"nft_mint\" &&\r\n\r\n                // The NFT ID is a 32-byte hex value and it matches the hash\r\n                (hexToBytes(this.nftId).length === 32) &&\r\n                this.nftId === this.hash() &&\r\n\r\n                // The data isn't null and can be turned into a JSON string\r\n                this.nftData !== null &&\r\n                JSON.stringify(this.nftData).length > 0\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RealBadNftTransfer {\r\n    type = \"nft_transfer\";\r\n    nftId = null;       // The ID (hash) of the NFT. Must already be minted before it can be transferred.\r\n    nftNonce = 0;       // Incrementing number specifying transfer count for this NFT. Must be sequentually incrementing or the transaction will be ignored.\r\n    destination = null; // Destination account ID (public key) for the new owner of the NFT.\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        type,\r\n        nftId,\r\n        nftNonce,\r\n        destination,\r\n    }) {\r\n        try {\r\n            if (type !== \"nft_transfer\") return null;\r\n\r\n            let r = new RealBadNftTransfer();\r\n            r.type = type;\r\n            r.nftId = nftId;\r\n            r.nftNonce = nftNonce;\r\n            r.destination = destination;\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the all fields have correct data types\r\n    isValid() {\r\n        try {\r\n            return (\r\n                this.type === \"nft_transfer\" &&\r\n\r\n                // The NFT nonce is an integer\r\n                Number.isInteger(this.nftNonce) &&\r\n\r\n                // The NFT ID is a 32-byte hex value\r\n                (hexToBytes(this.nftId).length === 32) &&\r\n\r\n                // The destination account is a 32-byte hex value\r\n                (hexToBytes(this.destination).length === 32)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// Required base fields for every transaction that occurs in the network\r\nexport class RealBadTransaction {\r\n    source = null;          // Source account ID (public key)\r\n    sourceNonce = 0;        // Source account transaction nonce. Used to ensure transactions (including transactionFees) apply IN ORDER.\r\n                            // Must be sequentially incrementing or transaction will be ignored.\r\n                            // nonce is NOT REQURIED and NOT UPDATED if no coins are spent (txFee or transfer).\r\n    timestamp = null;       // Time when the transaction is created. Miners will only propagate and process transactions during a certain time window.\r\n    transactionFee = 0;     // Fee to be paid to the miner if this transaction is accepted into a block. Miners _might_ not accept transactions without fees!\r\n    txData = null;          // The data portion of the transaction. One of the valid transaction object types must go here.\r\n    txId = null;            // Hash of `[source, timestamp, transactionFee, txData]`. This serves as the unique ID for the transaction.\r\n    signature = null;       // Signature of `txId` using the `source` account.\r\n\r\n    // Compute the hash (txId) of this object\r\n    hash() {\r\n        let tx_val = JSON.stringify([\r\n            this.source,\r\n            this.sourceNonce,\r\n            this.timestamp,\r\n            this.transactionFee,\r\n            this.txData,\r\n        ]);\r\n        return bytesToHex(sha256(tx_val));\r\n    }\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        source,\r\n        sourceNonce,\r\n        timestamp,\r\n        transactionFee,\r\n        txData,\r\n        txId,\r\n        signature,\r\n    }) {\r\n        try {\r\n            let r = new RealBadTransaction();\r\n            r.source = source;\r\n            r.sourceNonce = sourceNonce;\r\n            r.timestamp = new Date(timestamp);\r\n            r.transactionFee = transactionFee;\r\n            r.txId = txId;\r\n            r.signature = signature;\r\n\r\n            // Cute!\r\n            r.txData =\r\n                RealBadCoinTransfer.coerce(txData) ||\r\n                RealBadNftMint.coerce(txData) ||\r\n                RealBadNftTransfer.coerce(txData);\r\n\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the signature, hash, and confirm that all fields have correct non-null data types\r\n    async isValid() {\r\n        try {\r\n            return (\r\n                // The source ID is a 32-byte hex value\r\n                (hexToBytes(this.source).length === 32) &&\r\n\r\n                // The source nonce is an integer\r\n                Number.isInteger(this.sourceNonce) &&\r\n\r\n                // The timestamp is a Date object and contains a valid value\r\n                (this.timestamp instanceof Date) &&\r\n                !isNaN(this.timestamp.getTime()) &&\r\n\r\n                // The transaction fee is a non-negative finite number\r\n                Number.isFinite(this.transactionFee) &&\r\n                (this.transactionFee >= 0) &&\r\n\r\n                // The transaction internal data is valid\r\n                this.txData.isValid() &&\r\n\r\n                // The hash is a 32-byte hex value and it matches the actual hash of this object\r\n                (hexToBytes(this.txId).length === 32) &&\r\n                (this.hash() === this.txId) &&\r\n\r\n                // The signature is a 64-byte hex value and the signature is a valid sig of the hash from the source\r\n                (hexToBytes(this.signature).length === 64) &&\r\n                await ed.verify(this.signature, this.txId, this.source)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Seal the transaction, setting the source and timestamp and signing it with the account object provided.\r\n    // The account object needs to provide an `async getPubKeyHex()` and `async sign()` function\r\n    async seal(account) {\r\n        this.source = await account.getPubKeyHex();\r\n        this.timestamp = new Date();\r\n        this.txId = this.hash();\r\n        this.signature = bytesToHex(await account.sign(this.txId));\r\n    }\r\n}\r\n\r\nexport class RealBadBlock {\r\n    prevHash = '00'.repeat(32); // Hash of previous block. It is included in this block to form a block-chain.\r\n    blockHeight = 0;            // How far we are \"above\" the genesis block. This is previous block's height + 1.\r\n    timestamp = null;           // Time of last update to the block (prior to hash computation). This is mainly for display purposes.\r\n    transactions = [];          // List of all transactions in the block\r\n    miningReward = 100;         // Base reward claimed for mining this block\r\n    rewardDestination = null;   // Miner's destination account ID (public key) for mining reward and transaction fees.\r\n    difficulty = 256**2;        // Required difficulty for hash. Increasing this makes it harder to find a valid hash. For example, setting this to 256**N will require the top N bytes of the hash to be zeros.\r\n    nonce = 0;                  // Number that can be changed to cause block's hash to vary\r\n\r\n    #raw_hash() {\r\n        // Remove the nonce and compute the hash of everything else:\r\n        const {nonce, ...self_minus_nonce} = {...this};\r\n        return bytesToHex(sha256(JSON.stringify(self_minus_nonce)));\r\n    }\r\n\r\n    // Compute the hash of this object\r\n    // NOTE: We don't STORE the hash of the object inside the object because this\r\n    //       isn't a signed object so we can't trust the validity of any hash that\r\n    //       is TOLD to us! We have to check it ourselves!\r\n    get hash() {\r\n        const raw_hash = this.#raw_hash();\r\n\r\n        // Now concat the raw hash with the nonce and hash _that_ to get the final hash:\r\n        return bytesToHex(sha256(raw_hash + this.nonce.toString()));\r\n    }\r\n\r\n    static difficultyMetric(h) {\r\n        // The difficulty metric is proportional to how low the hash is relative to the \"zero difficulty\" level.\r\n        // The lower the hash as an integer, the bigger the difficulty.\r\n        let zeroDifficulty = 1n << 256n;\r\n        let hashAsInt = hexToBigint(h);\r\n        return zeroDifficulty / hashAsInt;\r\n    }\r\n\r\n    isSealed(minDifficulty = 256**2) {\r\n        let difficulty = Math.max(minDifficulty, this.difficulty);\r\n        let maxHash = (1n << 256n) / BigInt(difficulty);\r\n        let hashAsInt = hexToBigint(this.hash);\r\n        return hashAsInt < maxHash;\r\n    }\r\n\r\n    // Increment the nonce and keep trying to find a hash that is valid.\r\n    // Try up to num_attempts times before giving up.\r\n    tryToSeal(num_attempts) {\r\n        let maxHash = (1n << 256n) / BigInt(this.difficulty);\r\n        // If the timestamp already has a value, don't let it go BACKWARD\r\n        this.timestamp = new Date(Math.max(this.timestamp ?? Date.now(), Date.now()));\r\n\r\n        // Compute the raw hash (without the nonce) just one time!\r\n        const raw_hash = this.#raw_hash();\r\n\r\n        for (let i = 0; i < num_attempts; i++) {\r\n            // Now concat the raw hash with the nonce and hash _that_ to get the final hash:\r\n            const hash = bytesToHex(sha256(raw_hash + this.nonce.toString()));\r\n            let hashAsInt = hexToBigint(hash);\r\n            if (hashAsInt < maxHash) {\r\n                return this.isSealed(this.difficulty);\r\n            }\r\n            // We post-increment the nonce, so that repeated calls to this function don't waste any work.\r\n            this.nonce++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        prevHash,\r\n        blockHeight,\r\n        timestamp,\r\n        transactions,\r\n        miningReward,\r\n        rewardDestination,\r\n        difficulty,\r\n        nonce,\r\n    }) {\r\n        try {\r\n            let r = new RealBadBlock();\r\n            r.prevHash = prevHash;\r\n            r.blockHeight = blockHeight;\r\n            r.timestamp = new Date(timestamp);\r\n            r.transactions = transactions.map((t)=>{\r\n                return RealBadTransaction.coerce(t)\r\n            });\r\n            r.miningReward = miningReward;\r\n            r.rewardDestination = rewardDestination;\r\n            r.difficulty = difficulty;\r\n            r.nonce = nonce;\r\n\r\n            return r;\r\n        } catch (error) {\r\n            console.error(error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check that the block is sealed properly and confirm that all fields have correct non-null data types.\r\n    // This also checks that every Transaction in the block is correctly signed.\r\n    // NOTE: This does NOT mean that the Transactions are ALLOWED and CORRECT. That has to\r\n    //       be validated at the \"block chain\" level!\r\n    async isValid(minDifficulty = 256**2) {\r\n        try {\r\n            return (\r\n                // First check if the block is sealed, which will allow us to skip the work of detailed checks.\r\n                // This helps prevent us from getting spammed by garbage blocks and causing a DoS, since we can\r\n                // quickly check the seal but the seal takes a long time to make!\r\n                this.isSealed(minDifficulty)\r\n                // Note: isSealed() validates the hash quality, after which we don't care about \"difficulty\" or\r\n                //       \"nonce\" so we can skip those fields from now on.\r\n\r\n                // The previous block hash is a 32-byte hex value\r\n                && (hexToBytes(this.prevHash).length === 32)\r\n\r\n                // The blockHeight is a non-negative integer\r\n                && Number.isInteger(this.blockHeight)\r\n                && this.blockHeight >= 0\r\n\r\n                // If the blockHeight is 0, the previous hash should be all 0's as well:\r\n                && (\r\n                    this.blockHeight > 0 ||\r\n                    (this.prevHash === '00'.repeat(32))\r\n                )\r\n\r\n                // The timestamp is a Date object and contains a valid value\r\n                && (this.timestamp instanceof Date)\r\n                && !isNaN(this.timestamp.getTime())\r\n\r\n                // All the transactions have valid signatures and contain correct data types\r\n                && Array.isArray(this.transactions)\r\n                && await asyncEvery(this.transactions, async(t)=>{\r\n                    return (t instanceof RealBadTransaction) && await t.isValid();\r\n                })\r\n\r\n                // The mining reward is a non-negative finite number\r\n                && Number.isFinite(this.miningReward)\r\n                && (this.miningReward >= 0)\r\n\r\n                // The reward address is a 32-byte hex value\r\n                && (hexToBytes(this.rewardDestination).length === 32)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","// Import the data types for manipulating coin stuff\r\nimport {\r\n    RealBadCoinTransfer,\r\n    RealBadNftMint,\r\n    RealBadNftTransfer,\r\n    RealBadTransaction,\r\n    RealBadBlock\r\n} from './RealBadCoin.tsx';\r\n\r\nexport class RealBadAccountState {\r\n    balance = 0;\r\n    nonce = 0;\r\n\r\n    static coerce({\r\n        balance,\r\n        nonce,\r\n    }) {\r\n        let r = new RealBadAccountState();\r\n        r.balance = balance;\r\n        r.nonce = nonce;\r\n        return r;\r\n    }\r\n}\r\n\r\nexport class RealBadNftState {\r\n    owner = null;\r\n    nonce = 0;\r\n\r\n    static coerce({\r\n        owner,\r\n        nonce,\r\n    }) {\r\n        let r = new RealBadNftState();\r\n        r.owner = owner;\r\n        r.nonce = nonce;\r\n        return r;\r\n    }\r\n}\r\n\r\n// Exception thrown when a transaction is invalid\r\nexport class RealBadInvalidTransaction {\r\n    message = \"\";\r\n    transaction = null;\r\n    lastBlockHash = null;\r\n\r\n    constructor(message, transaction, lastBlockHash) {\r\n        this.message = message;\r\n        this.transaction = transaction;\r\n        this.lastBlockHash = lastBlockHash;\r\n    }\r\n\r\n    toString() {\r\n        if (this.lastBlockHash !== null) {\r\n            return \"Bad Transaction in \" + this.lastBlockHash.toString() + \":\\n\" + this.message + \"\\n\" + this.transaction.toString();\r\n        } else {\r\n            return \"Bad Transaction:\\n\" + this.message + \"\\n\" + this.transaction.toString();\r\n        }\r\n    };\r\n}\r\n\r\nexport class RealBadInvalidBlock {\r\n    message = \"\";\r\n    blockHash = \"\";\r\n\r\n    constructor(message, blockHash) {\r\n        this.message = message;\r\n        this.blockHash = blockHash;\r\n    }\r\n\r\n    toString() {\r\n      return \"Bad Block \" + this.blockHash.toString() + \":\\n\" + this.message;\r\n    };\r\n}\r\n\r\nexport class RealBadFutureBlock extends RealBadInvalidBlock {\r\n    blockTimestamp : Date;\r\n\r\n    constructor(message, blockHash, blockTimestamp) {\r\n        super(message, blockHash);\r\n        this.blockTimestamp = new Date(blockTimestamp);\r\n    }\r\n}\r\n\r\n// This represents the state of the ledger at any given point\r\nexport class RealBadLedgerState {\r\n    accounts = {};  // List of \"accountId:RealBadAccountState\" pairs.\r\n    nfts = {};      // List of \"nftId:RealBadNftState\" pairs.\r\n    transactionFees = 0;\r\n\r\n    // Initialize the \"last block\" info with the \"pre-genesis block\"\r\n    lastBlockHash = '00'.repeat(32);\r\n    lastBlockHeight = -1;\r\n\r\n    // This is the target difficulty, based on the timestamps between each block\r\n    nextBlockDifficulty = null; // Difficulty of a genesis block!\r\n    lastBlockTimestamp = null;\r\n\r\n    // This is the sum of all difficulty metrics for all blocks in the chain leading up to this state.\r\n    // It is used to determine which chain represents the highest block.\r\n    totalDifficulty = 0n;\r\n\r\n    // All errors for the entire chain up until this point.\r\n    // Errors just keep stacking, but only one is needed to invalidate a chain!\r\n    errors = [];\r\n\r\n    // Hashes of the children of a this block so we can produce pretty graphs later.\r\n    // NOTE: This property is not inherited when cloning into a child block!\r\n    children = [];\r\n\r\n    // Can assign the genesis block difficulty in the constructor\r\n    constructor(genesisDifficulty = 2e6) {\r\n        this.nextBlockDifficulty = genesisDifficulty;\r\n    }\r\n\r\n    static coerce({\r\n        accounts,\r\n        nfts,\r\n        transactionFees,\r\n        lastBlockHash,\r\n        lastBlockHeight,\r\n        nextBlockDifficulty,\r\n        lastBlockTimestamp,\r\n        totalDifficulty,\r\n        errors,\r\n        children,\r\n    }) {\r\n        let r = new RealBadLedgerState();\r\n        Object.keys(accounts).forEach(k=>{\r\n            r.accounts[k] = RealBadAccountState.coerce(accounts[k]);\r\n        });\r\n        Object.keys(nfts).forEach(k=>{\r\n            r.nfts[k] = RealBadNftState.coerce(nfts[k]);\r\n        });\r\n        r.transactionFees = transactionFees;\r\n        r.lastBlockHash = lastBlockHash;\r\n        r.lastBlockHeight = lastBlockHeight;\r\n        r.nextBlockDifficulty = nextBlockDifficulty;\r\n        r.lastBlockTimestamp = new Date(lastBlockTimestamp);\r\n        r.totalDifficulty = BigInt(totalDifficulty);\r\n        r.errors = errors.map(e=>{\r\n            if(\"blockTimestamp\" in e) {\r\n                return new RealBadFutureBlock(e.message, e.blockHash, e.blockTimestamp);\r\n            }\r\n            else if (\"blockHash\" in e) {\r\n                return new RealBadInvalidBlock(e.message, e.blockHash);\r\n            }\r\n            else {\r\n                return new RealBadInvalidTransaction(e.message, e.transaction, e.lastBlockHash);\r\n            }\r\n        });\r\n        r.children = children;\r\n        return r;\r\n    }\r\n\r\n    // Flatten down to values that can be saved as JSON\r\n    toJSON() {\r\n        return {\r\n            accounts: this.accounts,\r\n            nfts: this.nfts,\r\n            transactionFees: this.transactionFees,\r\n            lastBlockHash: this.lastBlockHash,\r\n            lastBlockHeight: this.lastBlockHeight,\r\n            nextBlockDifficulty: this.nextBlockDifficulty,\r\n            lastBlockTimestamp: this.lastBlockTimestamp,\r\n            totalDifficulty: this.totalDifficulty.toString(),\r\n            errors: this.errors,\r\n            children: this.children,\r\n        };\r\n    }\r\n\r\n    // Return a deep-ish copy clone of the state\r\n    clone() {\r\n        return RealBadLedgerState.coerce(this);\r\n    }\r\n\r\n    // Try and apply a transaction to the current state\r\n    // Raises exception and doesn't change the state if it creates an unpermissible condition\r\n    // Assumes that you've already checked that the transaction is VALID!\r\n    tryTransaction(t, ignoreBlockTimestamp : boolean = false) {\r\n        // Don't allow transactions to have a timestamp AFTER the block timestamp:\r\n        if (!ignoreBlockTimestamp && (t.timestamp > this.lastBlockTimestamp)) throw new RealBadInvalidTransaction(\"Transaction timestamp is newer than block timestamp!\", t, this.lastBlockHash);\r\n\r\n        if (t.txData instanceof RealBadCoinTransfer) {\r\n            if (!(t.source in this.accounts)) throw new RealBadInvalidTransaction(\"Account tried to send coins before it existed\", t, this.lastBlockHash);\r\n            if (t.sourceNonce !== this.accounts[t.source].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect nonce\", t, this.lastBlockHash);\r\n            if (t.txData.amount + t.transactionFee > this.accounts[t.source].balance) throw new RealBadInvalidTransaction(\"Insufficient balance\", t, this.lastBlockHash);\r\n\r\n            // Consume the money spent from this account:\r\n            this.accounts[t.source].nonce++;\r\n            this.accounts[t.source].balance -= t.txData.amount + t.transactionFee;\r\n\r\n            // Give the money to the other accounts, creating them if needed:\r\n            this.transactionFees += t.transactionFee;\r\n            if (!(t.txData.destination in this.accounts)) this.accounts[t.txData.destination] = new RealBadAccountState();\r\n            this.accounts[t.txData.destination].balance += t.txData.amount;\r\n        }\r\n        else if (t.txData instanceof RealBadNftMint) {\r\n            // See if the NFT already exists\r\n            if (t.txData.nftId in this.nfts) throw new RealBadInvalidTransaction(\"NFT Mint attempted on already-existing NFT ID\", t, this.lastBlockHash);\r\n\r\n            // Accounts only have to exist and have coins if they are paying a Tx fee.\r\n            // Otherwise they don't need to exist and they also don't increment their nonce!\r\n            if (t.transactionFee > 0) {\r\n                if (!(t.source in this.accounts)) throw new RealBadInvalidTransaction(\"Account tried to pay NFT Mint txFee before it existed\", t, this.lastBlockHash);\r\n                if (t.sourceNonce !== this.accounts[t.source].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect nonce for NFT Mint txFee\", t, this.lastBlockHash);\r\n                if (t.transactionFee > this.accounts[t.source].balance) throw new RealBadInvalidTransaction(\"Insufficient balance for NFT Mint txFee\", t, this.lastBlockHash);\r\n            }\r\n\r\n            if (t.transactionFee > 0) {\r\n                // Consume the money spent from this account and increment the nonce:\r\n                this.accounts[t.source].nonce++;\r\n                this.accounts[t.source].balance -= t.transactionFee;\r\n\r\n                // Accept the transaction fee:\r\n                this.transactionFees += t.transactionFee;\r\n            }\r\n\r\n            // Create the NFT and claim it for this account\r\n            let nft = new RealBadNftState();\r\n            nft.nonce = 0;\r\n            nft.owner = t.source;\r\n            this.nfts[t.txData.nftId] = nft;\r\n        }\r\n        else if (t.txData instanceof RealBadNftTransfer) {\r\n            let nftid = t.txData.nftId;\r\n            if (!(nftid in this.nfts)) throw new RealBadInvalidTransaction(\"NFT Transfer attempted on non-existent NFT ID\", t, this.lastBlockHash);\r\n            if (this.nfts[nftid].owner !== t.source) throw new RealBadInvalidTransaction(\"NFT Transfer attempted by non-owner of NFT\", t, this.lastBlockHash);\r\n            if (t.txData.nftNonce !== this.nfts[nftid].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect NFT nonce\", t, this.lastBlockHash);\r\n\r\n            // Accounts only have to exist and have coins if they are paying a Tx fee.\r\n            // Otherwise they don't need to exist and they also don't increment their nonce!\r\n            if (t.transactionFee > 0) {\r\n                if (!(t.source in this.accounts)) throw new RealBadInvalidTransaction(\"Account tried to pay NFT Mint txFee before it existed\", t, this.lastBlockHash);\r\n                if (t.sourceNonce !== this.accounts[t.source].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect nonce for NFT Mint txFee\", t, this.lastBlockHash);\r\n                if (t.transactionFee > this.accounts[t.source].balance) throw new RealBadInvalidTransaction(\"Insufficient balance for NFT Mint txFee\", t, this.lastBlockHash);\r\n            }\r\n\r\n            if (t.transactionFee > 0) {\r\n                // Consume the money spent from this account and increment the nonce:\r\n                this.accounts[t.source].nonce++;\r\n                this.accounts[t.source].balance -= t.transactionFee;\r\n\r\n                // Accept the transaction fee:\r\n                this.transactionFees += t.transactionFee;\r\n            }\r\n\r\n            // Enjoy your shiny new NFT!\r\n            this.nfts[nftid].nonce++;\r\n            this.nfts[nftid].owner = t.txData.destination;\r\n        }\r\n    }\r\n\r\n    // Try and apply a block to the current state\r\n    // Returns a new RealBadLedgerState with the block applied if successful. Otherwise returns null.\r\n    // Assumes that you've already checked that the block is VALID and that you approve of the mining reward amount!\r\n    applyBlock(block) {\r\n        const hash = block.hash;\r\n        // Make a deep copy of ourselves\r\n        let s = this.clone();\r\n        s.children = []; // Brand new state doesn't have children\r\n\r\n        // Add the block as a child of \"this\".\r\n        // NOTE: When a block that was from the future gets \"reconsidered\" it can cause this function\r\n        // to get called multiple times with the same block, so we DO have to check for uniqueness when inserting children!\r\n        if (!this.children.includes(hash)) this.children.push(hash);\r\n\r\n        // First just check if the new block fits as the next block in the block chain\r\n        if (block.prevHash !== this.lastBlockHash) s.errors.push(new RealBadInvalidBlock(\"Block does not point at this state's prevHash\", hash));\r\n        if (block.blockHeight !== this.lastBlockHeight + 1) s.errors.push(new RealBadInvalidBlock(\"Block height is not lastBlockHeight + 1\", hash));\r\n        if (block.timestamp > new Date(Date.now() + 5*1000)) s.errors.push(new RealBadFutureBlock(\"Block timestamp is from the future!\", hash, block.timestamp));\r\n        if ((block.blockHeight !== 0) && (block.timestamp < this.lastBlockTimestamp)) s.errors.push(new RealBadInvalidBlock(\"Block timestamp is not greater than last block's timestamp\", hash));\r\n\r\n        s.lastBlockHash = hash;\r\n        s.lastBlockHeight = block.blockHeight;\r\n        let blockTimeDelta = (block.blockHeight === 0) ? 0 : Math.max(0, block.timestamp - this.lastBlockTimestamp);\r\n        s.lastBlockTimestamp = block.timestamp;\r\n\r\n        // The difficulty metric is proportional to how low the hash is relative to the \"zero difficulty\" level.\r\n        // The lower the hash as an integer, the bigger the difficulty.\r\n        // When you sum this metric from two blocks, it is equivalent to having solved one block with twice the difficulty.\r\n        s.totalDifficulty = this.totalDifficulty + RealBadBlock.difficultyMetric(s.lastBlockHash);\r\n\r\n        // Check if they tried hard enough\r\n        if (block.difficulty < this.nextBlockDifficulty) s.errors.push(new RealBadInvalidBlock(\"Block's target difficulty is too low\", hash));\r\n\r\n        // Re-target the difficulty based on how long this last block took to harvest\r\n        // This uses a long-running \"leaky integrator\" IIR filter to low-pass filter the block gaps\r\n        // until we reach an equilibrium. But everybody can easily compute the next result based only on\r\n        // the last two timestamps!\r\n        if (block.blockHeight === 0) {\r\n            // The first 2 blocks get the same \"genesis difficulty\":\r\n            s.nextBlockDifficulty = this.nextBlockDifficulty;\r\n        }\r\n        else {\r\n            let errorRatio = blockTimeDelta / (15 * 1000); // Targeting 15 seconds per block\r\n            // Exponential moving average (EMA) approximation\r\n            // NOTE: We clamp the error ratio between 0 and 2 so that even if we get EXTREMELY long gaps we\r\n            // don't adjust more than 1/N in either direction!\r\n            errorRatio = Math.min(2, errorRatio);\r\n            const N = 40; // Number of blocks of \"smoothing\" effect.\r\n            s.nextBlockDifficulty = Math.round(this.nextBlockDifficulty * (1 + (1 - errorRatio) / N));\r\n        }\r\n        //console.log(\"Target difficulty after block \" + s.lastBlockHeight.toString() + \" is \" + s.nextBlockDifficulty.toString());\r\n\r\n        // Attempt to apply all the transactions\r\n        try {\r\n            block.transactions.forEach(t => {\r\n                s.tryTransaction(t);\r\n            });\r\n        } catch (error) {\r\n            s.errors.push(error);\r\n        }\r\n\r\n        // If successful, pay the mining rewards, including the sum of transactionFees from all transactions.\r\n        if (!(block.rewardDestination in s.accounts)) s.accounts[block.rewardDestination] = new RealBadAccountState();\r\n        s.accounts[block.rewardDestination].balance += block.miningReward + s.transactionFees;\r\n\r\n        // Clear out transaction fees now that they are claimed\r\n        s.transactionFees = 0;\r\n\r\n        if (s.errors.length) console.error(\"Errors in block \" + block.blockHeight + \": \" + JSON.stringify(s.errors));\r\n\r\n        return s;\r\n    }\r\n}\r\n\r\n// Keep track of a set of blocks and provide helper functions for identifying the longest chain, etc.\r\n// NOTE: This is a LOCAL data structure and is not something that can be trusted if it is sent from elsewhere!\r\nexport class RealBadCache {\r\n    _blocks = {};               // Key/value pairs with key as block hash and full state of system as the value\r\n    _anticipatedBlocks = {};    // Key/value pairs with key as \"prevHash\" for blocks that don't exist in our cache yet, and value as a list of blocks waiting on them to arrive.\r\n    _readyBlocks = [];          // List of hashes of blocks that are marked as \"ready for processing state\". They are pulled from _anticipatedBlocks once their ancestor is done processing.\r\n    _bestBlock = null;          // Hash of the top-scoring block (i.e. the one with the deepest block chain \"strength\")\r\n    _txPool = {};               // Pool of un-confirmed transactions that we can try add to a block.\r\n    _recentConfirmedTx = {};    // Pool of recently confirmed transactions so we can avoid repeating them.\r\n    _lastMiningRoot = null;     // This is the last block we attempted to mine on top of.\r\n    minDifficulty = 256**2;     // Minimum difficulty level of blocks to allow into our cache.\r\n    genesisDifficulty = 2e6;    // Difficulty of genesis blocks\r\n\r\n    // Only accept good RealBadBlocks into our cache!\r\n    async addBlock(block, source, minDifficulty=this.minDifficulty) {\r\n        try {\r\n            let hash = block.hash; // Save us the trouble of recomputing this tons of times!\r\n            if (\r\n                // Make sure its a valid sealed block\r\n                (block instanceof RealBadBlock)\r\n                && await block.isValid(minDifficulty)\r\n\r\n                // Also make sure we haven't seen it before\r\n                && !(hash in this._blocks)\r\n            ) {\r\n                // This is a new block, so create the info object with just the block and originator for now.\r\n                this._blocks[hash] = {\r\n                    block: block,\r\n                    source: source,\r\n                };\r\n\r\n                // Check if this block is a genesis block or is linked to a block with a valid already-computed state\r\n                if ((block.blockHeight === 0) || ((block.prevHash in this._blocks) && (\"state\" in this._blocks[block.prevHash]))) {\r\n                    // Special check for anachronistic blocks.\r\n                    // If this block has any parents that were \"from the future\" at the time but are now OK, we want\r\n                    // to re-visit them and update their state before processing this block.\r\n                    // This is because we want to accept blocks that are out of sync _if everybody else does_, because that means\r\n                    // that _we_ are the ones with the bad clock. :shrug:\r\n                    if (block.blockHeight !== 0) {\r\n                        const parentErrors = this.getState(block.prevHash).errors;\r\n                        for(let e of parentErrors) {\r\n                            // If the block is OK now, then dump it and all of its children into the \"ready\" queue to get reevaluated\r\n                            if (e instanceof RealBadFutureBlock) {\r\n                                if (e.blockTimestamp <= new Date(Date.now() + 5*1000)) {\r\n                                    // Dump this block and all its children into the hash\r\n                                    this._readyBlocks = [e.blockHash].concat(this.getChain(block.prevHash, e.blockHash));\r\n\r\n                                    // Note: Quit once we find the first (aka OLDEST) one, since we're going to refresh all the children as well.\r\n                                    break;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    this._readyBlocks.push(hash);\r\n                }\r\n                else {\r\n                    // Otherwise (can't compute the state yet), add this block to the \"watch list\" for later computation\r\n                    // once we fill in the missing links.\r\n                    if (!(block.prevHash in this._anticipatedBlocks)) this._anticipatedBlocks[block.prevHash] = [];\r\n                    this._anticipatedBlocks[block.prevHash].push(hash);\r\n\r\n                    if (this._readyBlocks.length) console.error(\"Expected _readyBlocks to be empty but there were \" + this._readyBlocks.length);\r\n                }\r\n\r\n                // Update all the blocks in the ready list\r\n                // Note that updating them might add new ones to the ready list by pulling them from _anticipatedBlocks.\r\n                // We update those too until we run out.\r\n                while (this._readyBlocks.length) {\r\n                    let b = this.getBlock(this._readyBlocks.shift());\r\n                    let h = b.hash;\r\n\r\n                    if (b.blockHeight === 0) {\r\n                        // Genesis block!\r\n                        this._blocks[h].state = (new RealBadLedgerState(this.genesisDifficulty)).applyBlock(b);\r\n                    }\r\n                    // ASSUMPTION: Unless this is a genesis block, if it got into _readyBlocks then it's prevHash and state *is available* in our block cache!\r\n                    else {\r\n                        // The new state might be bad if this block is bad.\r\n                        this._blocks[h].state = this._blocks[b.prevHash].state.applyBlock(b);\r\n                    }\r\n\r\n                    // Now that we updated a block, see if this lets us update any others, which will have us repeat the loop again.\r\n                    if (h in this._anticipatedBlocks) {\r\n                        this._readyBlocks = this._readyBlocks.concat(this._anticipatedBlocks[h]);\r\n                        delete this._anticipatedBlocks[h];\r\n                    }\r\n\r\n                    // Also now that we updated a block, see if it is now the \"best block\".\r\n                    // This is the only place where we need to check for those updates, because we just added new state that we didn't have before.\r\n                    // NOTE: The \"best\" chain is weighed based on total difficulty to create it, rather than block height!\r\n                    //       Block height is just a human-readable metric and is used to detect genesis blocks.\r\n                    let thisState = this.getState(h);\r\n                    if (thisState.errors.length === 0) {\r\n                        let bestState = this.getState(this._bestBlock);\r\n                        if (\r\n                            (bestState === null) ||\r\n                            (thisState.totalDifficulty > bestState.totalDifficulty)\r\n                        ) {\r\n                            this._bestBlock = h;\r\n                        }\r\n                    }\r\n                }\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Apply a checkpoint based on known good block\r\n    // This can let the account get \"up to speed\" quickly while it then churns through\r\n    // the process of downloading additional blocks in the background.\r\n    restoreCheckpoint(block, state) {\r\n        // Just inject it directly in there and call it our \"best\":\r\n        this._bestBlock = block.hash;\r\n        this._blocks[this._bestBlock] = {\r\n            block: block,\r\n            state: state,\r\n        }\r\n    }\r\n\r\n    // Return hash of the best block that we know about:\r\n    get bestBlockHash() {\r\n        return this._bestBlock;\r\n    }\r\n\r\n    getBlock(hash) {\r\n        if (hash in this._blocks) {\r\n            return this._blocks[hash].block;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getSource(hash) {\r\n        if (hash in this._blocks) {\r\n            return this._blocks[hash].source;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getState(hash) {\r\n        if ((hash in this._blocks) && (\"state\" in this._blocks[hash])) {\r\n            return this._blocks[hash].state;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Return list with all blocks in the chain.\r\n    // Stops when it runs out of previous blocks (or hits a genesis block).\r\n    // Also stops early when it hits rootHash if that is part of the chain.\r\n    // If `hash` is null-ish, then it will assume you want the top of the \"best chain\".\r\n    getChain(hash, rootHash=null, maxLength=Infinity) {\r\n        let chain = [];\r\n        let currHash = hash ?? this.bestBlockHash;\r\n        let currBlock = this.getBlock(currHash);\r\n\r\n        while ((currHash !== rootHash) && (currBlock !== null) && (chain.length < maxLength)) {\r\n            chain.unshift(currHash);\r\n\r\n            // Stop when we hit genesis block\r\n            if (currBlock.blockHeight === 0) break;\r\n\r\n            currHash = currBlock.prevHash;\r\n            currBlock = this.getBlock(currHash);\r\n        }\r\n\r\n        return chain;\r\n    }\r\n\r\n    // Because \"confirmations\" really applies to the _transactions_ more than the blocks themselves, the number of\r\n    // confirmations of a block is the number of blocks (including itself) after it *in the best chain*.\r\n    // If a block isn't in the best chain, its confirmations are 0! If a block is the head of the main chain, it's confirmations are 1.\r\n    getConfirmations(hash) {\r\n        // Need a special case for the exact top block, since it will return a 0-length chain.\r\n        if (hash === this.bestBlockHash) return 1;\r\n\r\n        const chain = this.getChain(null, hash);\r\n        const chainParent = this.getBlock(chain[0])?.prevHash;\r\n        if (chain.length && (chainParent === hash)) return 1 + chain.length;\r\n        else return 0;\r\n    }\r\n\r\n    // Validate and possibly add a transaction into the memory pool.\r\n    // If the transaction is VALID and NEW, then return true.\r\n    async addTransaction(tx) {\r\n        try {\r\n            if (\r\n                // Make sure its a valid signed Tx\r\n                (tx instanceof RealBadTransaction)\r\n                && await tx.isValid()\r\n\r\n                // Make sure it's timestamp isn't (too far) in the future or too far in the past\r\n                // NOTE: We will only APPLY transactions if they are in the past and\r\n                // less than 5 minutes old, according to our clock, but we'll put it in the memory pool\r\n                // even if it is up to 5 minute into the future! This is in case our clock is slower than\r\n                // the rest of the network but we still want to service transactions.\r\n                && (tx.timestamp < new Date(Date.now() + 5*60*1000))\r\n                && (Date.now() - tx.timestamp < 5*60*1000) // We only keep them for 5 minutes\r\n\r\n                // Also quit early if we already have this one!\r\n                && !(tx.txId in this._txPool)\r\n                && !(tx.txId in this._recentConfirmedTx)\r\n            ) {\r\n                // This is a new transaction that we haven't seen recently!\r\n                this._txPool[tx.txId] = tx;\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Create the next block for mining, based on the best known block plus\r\n    // whatever valid transactions we can grab from the txPool\r\n    makeMineableBlock(reward, destination) {\r\n        let prevHash = this.bestBlockHash ?? '00'.repeat(32);\r\n\r\n        if (this._lastMiningRoot !== prevHash) {\r\n            // Need to reshuffle the transaction pools if the mining root is different this time!\r\n\r\n            //TODO: Maybe find a more efficient method for this other\r\n            // than \"construct entire chains and compare them\"!\r\n            let oldChain = this.getChain(this._lastMiningRoot);\r\n            let newChain = this.getChain(prevHash);\r\n\r\n            // These are \"Removed\" blocks. All transactions in them should be added to the tx pool\r\n            let removedBlocks = oldChain.filter((b, i)=>!newChain.includes(b));\r\n            removedBlocks.forEach(h=>{\r\n                let b = this.getBlock(h);\r\n                b.transactions.forEach(t=>{\r\n                    // Add them to txPool\r\n                    // NOTE: This can cause really really old transactions to reenter the pool. :shrug:\r\n                    this._txPool[t.txId] = t;\r\n\r\n                    // Remove from recently confirmed pool:\r\n                    delete this._recentConfirmedTx[t.txId];\r\n                });\r\n            });\r\n\r\n            // These are \"Added\" blocks. All transactions in them should be removed from the tx pool\r\n            let addedBlocks = newChain.filter((b, i)=>!oldChain.includes(b));\r\n            addedBlocks.forEach(h=>{\r\n                let b = this.getBlock(h);\r\n                b.transactions.forEach(t=>{\r\n                    // Add them to recently confirmed pool, but only if they are \"recent\":\r\n                    if (\r\n                        (t.timestamp < new Date(Date.now() + 5*60*1000))\r\n                        && (Date.now() - t.timestamp < 5*60*1000)\r\n                    ) {\r\n                        this._recentConfirmedTx[t.txId] = t;\r\n                    }\r\n\r\n                    // Remove from txPool:\r\n                    delete this._txPool[t.txId];\r\n                });\r\n            });\r\n\r\n            // Save our \"last mining block\" for next time!\r\n            this._lastMiningRoot = prevHash;\r\n        }\r\n\r\n        // Get the info for the previous block that we're going to build upon.\r\n        // NOTE: This might be null!\r\n        let lastBlock = this.getBlock(prevHash);\r\n        let lastBlockState = this.getState(prevHash) ?? new RealBadLedgerState(this.genesisDifficulty);\r\n        let prevHeight = lastBlock?.blockHeight ?? -1;\r\n\r\n        let b = new RealBadBlock();\r\n        b.prevHash = prevHash;\r\n        b.blockHeight = prevHeight + 1;\r\n        b.difficulty = lastBlockState.nextBlockDifficulty;\r\n        b.miningReward = reward;\r\n        b.rewardDestination = destination;\r\n        // Set the block's timestamp to at least _slightly_ ahead of the last block so that we\r\n        // don't allow timestamps to go backward!\r\n        b.timestamp = new Date(Number(lastBlock?.timestamp ?? Date.now()) + 1);\r\n\r\n        // Try and add as many transactions to the block as will create a valid state\r\n        let s = lastBlockState.clone();\r\n        let poolCopy = [];\r\n        for (const txId in this._txPool) {\r\n            poolCopy.push(txId);\r\n        }\r\n\r\n        // Transactions only \"work\" in certain orders, so try our best to find that order.\r\n        // We're going to loop until we don't get any new valid transactions\r\n        // in a pass through the list\r\n        while (true) {\r\n            let newTransactions = [];\r\n            poolCopy.forEach(txId=>{\r\n                try {\r\n                    s.tryTransaction(this._txPool[txId]);\r\n                    newTransactions.push(txId);\r\n                } catch (error) {\r\n                    if (!(error instanceof RealBadInvalidTransaction)) {\r\n                        throw error;\r\n                    }\r\n                }\r\n            });\r\n\r\n            // When we stop making progress, quit!\r\n            if (newTransactions.length === 0) break;\r\n\r\n            // Put the new transactions in the block\r\n            b.transactions = b.transactions.concat(newTransactions.map(txId=>this._txPool[txId]));\r\n\r\n            // Remove them from further consideration\r\n            poolCopy = poolCopy.filter((txId, i)=>!newTransactions.includes(txId));\r\n        }\r\n        return b;\r\n    }\r\n}\r\n","// This is a background thread that will manage the validation and storage of\r\n// blocks, to offload the work from the UI thread\r\nimport * as Comlink from 'comlink';\r\n\r\nimport {\r\n    RealBadBlock,\r\n    RealBadTransaction,\r\n} from './RealBadCoin.tsx';\r\n\r\nimport {\r\n    RealBadCache,\r\n    RealBadLedgerState\r\n} from './RealBadState.tsx';\r\n\r\nclass CacheWorker {\r\n    #cache = new RealBadCache();\r\n\r\n    // Validate and possibly add a block to the cache\r\n    async addBlock(block, source) {\r\n        let b = RealBadBlock.coerce(block);\r\n        return await this.#cache.addBlock(b, source);\r\n    }\r\n\r\n    // Validate and possibly add a list of blocks to the cache\r\n    async addBlocks(blockList, source) {\r\n        let anyGood = false;\r\n        for (let b of blockList) {\r\n            // WARNING: The order of the operands matters here, due to lazy execution!\r\n            anyGood = await this.addBlock(b, source) || anyGood;\r\n        }\r\n        return anyGood;\r\n    }\r\n\r\n    restoreCheckpoint(block, state) {\r\n        this.#cache.restoreCheckpoint(\r\n            RealBadBlock.coerce(block),\r\n            RealBadLedgerState.coerce(state),\r\n        );\r\n    }\r\n\r\n    // Return all the info about one block from the cache\r\n    getBlockInfo(hash) {\r\n        return {\r\n            block: this.#cache.getBlock(hash),\r\n            state: this.#cache.getState(hash),\r\n            source: this.#cache.getSource(hash),\r\n        };\r\n    }\r\n\r\n    // Get a list of blocks (just the blocks, not full info!) matching the list of hashes.\r\n    getBlocks(hashList) {\r\n        return hashList.map((h, i)=>this.#cache.getBlock(h));\r\n    }\r\n\r\n    // Get the list of hashes comprising the chain, starting at `hash` and going\r\n    // backward until `rootHash` is found (or a genesis block, or a block with no parent).\r\n    // If topHash is null or undefined, then we start at the \"best\" hash.\r\n    getChain(hash, rootHash=null, maxLength=Infinity) {\r\n        return this.#cache.getChain(hash, rootHash, maxLength);\r\n    }\r\n\r\n    // Get the number of \"confirmations\" for a particular block (i.e. how many blocks, including itself,\r\n    // are on the main chain after it).\r\n    getConfirmations(hash) {\r\n        return this.#cache.getConfirmations(hash);\r\n    }\r\n\r\n    // Return the hash of the top of the \"best chain\" that we know about\r\n    get bestBlockHash() {\r\n        return this.#cache.bestBlockHash;\r\n    }\r\n\r\n    // Validate and possibly add a transaction into the memory pool.\r\n    // If the transaction is VALID and NEW, then return true.\r\n    async addTransaction(transaction) {\r\n        let tx = RealBadTransaction.coerce(transaction);\r\n        return await this.#cache.addTransaction(tx);\r\n    }\r\n\r\n    makeMineableBlock(reward, destination) {\r\n        return this.#cache.makeMineableBlock(reward, destination);\r\n    }\r\n}\r\n\r\nComlink.expose(CacheWorker);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [416], () => (__webpack_require__(2455)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"f76753dc\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t475: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkrealbadcoin\"] = self[\"webpackChunkrealbadcoin\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn __webpack_require__.e(416).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["RealBadCoinTransfer","type","destination","amount","r","isValid","this","hexToBytes","length","Number","isFinite","RealBadNftMint","nftData","nftId","hash","bytesToHex","sha256","JSON","stringify","RealBadNftTransfer","nftNonce","isInteger","RealBadTransaction","source","sourceNonce","timestamp","transactionFee","txData","txId","signature","tx_val","Date","coerce","isNaN","getTime","ed","account","getPubKeyHex","sign","RealBadBlock","prevHash","repeat","blockHeight","transactions","miningReward","rewardDestination","difficulty","nonce","raw_hash","toString","h","hexToBigint","isSealed","minDifficulty","Math","max","maxHash","BigInt","tryToSeal","num_attempts","now","i","map","t","error","console","Array","isArray","async","arr","predicate","e","asyncEvery","self_minus_nonce","RealBadAccountState","balance","RealBadNftState","owner","RealBadInvalidTransaction","constructor","message","transaction","lastBlockHash","RealBadInvalidBlock","blockHash","RealBadFutureBlock","blockTimestamp","super","RealBadLedgerState","genesisDifficulty","accounts","nfts","transactionFees","lastBlockHeight","nextBlockDifficulty","lastBlockTimestamp","totalDifficulty","errors","children","Object","keys","forEach","k","toJSON","clone","tryTransaction","nft","nftid","applyBlock","block","s","includes","push","blockTimeDelta","difficultyMetric","errorRatio","min","N","round","RealBadCache","_blocks","_anticipatedBlocks","_readyBlocks","_bestBlock","_txPool","_recentConfirmedTx","_lastMiningRoot","parentErrors","getState","concat","getChain","b","getBlock","shift","state","thisState","bestState","restoreCheckpoint","bestBlockHash","getSource","rootHash","maxLength","Infinity","chain","currHash","currBlock","unshift","getConfirmations","chainParent","tx","makeMineableBlock","reward","oldChain","newChain","removedBlocks","filter","addedBlocks","lastBlock","lastBlockState","prevHeight","poolCopy","newTransactions","Comlink","addBlock","blockList","anyGood","getBlockInfo","getBlocks","hashList","addTransaction","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","fulfilled","j","every","key","splice","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","data","moreModules","runtime","pop","next","then"],"sourceRoot":""}