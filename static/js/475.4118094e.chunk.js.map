{"version":3,"file":"static/js/475.4118094e.chunk.js","mappings":"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","sources":["util/RealBadCoin.tsx","util/RealBadState.tsx","util/CacheWorker.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["// Data strucures and accessors for the RealBadCoin crypto currency\r\n\r\nimport * as ed from '@noble/ed25519';\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { bytesToHex, hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\r\nimport { hexToBigint } from 'bigint-conversion';\r\n\r\nexport async function asyncEvery(arr, predicate) {\r\n\tfor (let e of arr) {\r\n\t\tif (!await predicate(e)) return false;\r\n\t}\r\n\treturn true;\r\n};\r\n\r\nexport class RealBadCoinTransfer {\r\n    type = \"coin_transfer\";\r\n    destination = null; // Destination account ID (public key)\r\n    amount = 0;         // Amount of RealBadCoin to transfer (floating point number)\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        type,\r\n        destination,\r\n        amount,\r\n    }) {\r\n        try {\r\n            if (type !== \"coin_transfer\") return null;\r\n\r\n            let r = new RealBadCoinTransfer();\r\n            r.type = type;\r\n            r.destination = destination;\r\n            r.amount = amount;\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the all fields have correct data types\r\n    isValid() {\r\n        try {\r\n            return (\r\n                this.type === \"coin_transfer\" &&\r\n\r\n                // The destination is a 32-byte hex value\r\n                (hexToBytes(this.destination).length === 32) &&\r\n\r\n                // The amount is a finite positive number\r\n                Number.isFinite(this.amount) &&\r\n                (this.amount > 0)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// Create a new NFT. The \"source\" account is the owner of the NFT until it is transferred via a RealBadNftTransfer.\r\n// NOTE: These aren't free - like all transactions, you have to pay a miner's fee to make one!\r\nexport class RealBadNftMint {\r\n    type = \"nft_mint\";\r\n    nftData = null;     // Any data we want to \"mint\" as an NFT. Can be a string, and object, whatever...\r\n    nftId = null;       // The ID (hash) of the `nftData` object. Must a globally unique number on the block chain (so nftData must be unique).\r\n\r\n    // Compute the hash (txId) of this object\r\n    hash() {\r\n        return bytesToHex(sha256(JSON.stringify(this.nftData)));\r\n    }\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        type,\r\n        nftData,\r\n        nftId,\r\n    }) {\r\n        try {\r\n            if (type !== \"nft_mint\") return null;\r\n\r\n            let r = new RealBadNftMint();\r\n            r.type = type;\r\n            r.nftData = nftData;\r\n            r.nftId = nftId;\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the all fields have correct data types\r\n    isValid() {\r\n        try {\r\n            return (\r\n                this.type === \"nft_mint\" &&\r\n\r\n                // The NFT ID is a 32-byte hex value and it matches the hash\r\n                (hexToBytes(this.nftId).length === 32) &&\r\n                this.nftId === this.hash() &&\r\n\r\n                // The data isn't null and can be turned into a JSON string\r\n                this.nftData !== null &&\r\n                JSON.stringify(this.nftData).length > 0\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport class RealBadNftTransfer {\r\n    type = \"nft_transfer\";\r\n    nftId = null;       // The ID (hash) of the NFT. Must already be minted before it can be transferred.\r\n    nftNonce = 0;       // Incrementing number specifying transfer count for this NFT. Must be sequentually incrementing or the transaction will be ignored.\r\n    destination = null; // Destination account ID (public key) for the new owner of the NFT.\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        type,\r\n        nftId,\r\n        nftNonce,\r\n        destination,\r\n    }) {\r\n        try {\r\n            if (type !== \"nft_transfer\") return null;\r\n\r\n            let r = new RealBadNftTransfer();\r\n            r.type = type;\r\n            r.nftId = nftId;\r\n            r.nftNonce = nftNonce;\r\n            r.destination = destination;\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the all fields have correct data types\r\n    isValid() {\r\n        try {\r\n            return (\r\n                this.type === \"nft_transfer\" &&\r\n\r\n                // The NFT nonce is an integer\r\n                Number.isInteger(this.nftNonce) &&\r\n\r\n                // The NFT ID is a 32-byte hex value\r\n                (hexToBytes(this.nftId).length === 32) &&\r\n\r\n                // The destination account is a 32-byte hex value\r\n                (hexToBytes(this.destination).length === 32)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\n// Required base fields for every transaction that occurs in the network\r\nexport class RealBadTransaction {\r\n    source = null;          // Source account ID (public key)\r\n    sourceNonce = 0;        // Source account transaction nonce. Used to ensure transactions (including transactionFees) apply IN ORDER.\r\n                            // Must be sequentially incrementing or transaction will be ignored.\r\n                            // nonce is NOT REQURIED and NOT UPDATED if no coins are spent (txFee or transfer).\r\n    timestamp = null;       // Time when the transaction is created. Miners will only propagate and process transactions during a certain time window.\r\n    transactionFee = 0;     // Fee to be paid to the miner if this transaction is accepted into a block. Miners _might_ not accept transactions without fees!\r\n    txData = null;          // The data portion of the transaction. One of the valid transaction object types must go here.\r\n    txId = null;            // Hash of `[source, timestamp, transactionFee, txData]`. This serves as the unique ID for the transaction.\r\n    signature = null;       // Signature of `txId` using the `source` account.\r\n\r\n    // Compute the hash (txId) of this object\r\n    hash() {\r\n        let tx_val = JSON.stringify([\r\n            this.source,\r\n            this.sourceNonce,\r\n            this.timestamp,\r\n            this.transactionFee,\r\n            this.txData,\r\n        ]);\r\n        return bytesToHex(sha256(tx_val));\r\n    }\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        source,\r\n        sourceNonce,\r\n        timestamp,\r\n        transactionFee,\r\n        txData,\r\n        txId,\r\n        signature,\r\n    }) {\r\n        try {\r\n            let r = new RealBadTransaction();\r\n            r.source = source;\r\n            r.sourceNonce = sourceNonce;\r\n            r.timestamp = new Date(timestamp);\r\n            r.transactionFee = transactionFee;\r\n            r.txId = txId;\r\n            r.signature = signature;\r\n\r\n            // Cute!\r\n            r.txData =\r\n                RealBadCoinTransfer.coerce(txData) ||\r\n                RealBadNftMint.coerce(txData) ||\r\n                RealBadNftTransfer.coerce(txData);\r\n\r\n            return r;\r\n        } catch {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check the signature, hash, and confirm that all fields have correct non-null data types\r\n    async isValid() {\r\n        try {\r\n            return (\r\n                // The source ID is a 32-byte hex value\r\n                (hexToBytes(this.source).length === 32) &&\r\n\r\n                // The source nonce is an integer\r\n                Number.isInteger(this.sourceNonce) &&\r\n\r\n                // The timestamp is a Date object and contains a valid value\r\n                (this.timestamp instanceof Date) &&\r\n                !isNaN(this.timestamp.getTime()) &&\r\n\r\n                // The transaction fee is a non-negative finite number\r\n                Number.isFinite(this.transactionFee) &&\r\n                (this.transactionFee >= 0) &&\r\n\r\n                // The transaction internal data is valid\r\n                this.txData.isValid() &&\r\n\r\n                // The hash is a 32-byte hex value and it matches the actual hash of this object\r\n                (hexToBytes(this.txId).length === 32) &&\r\n                (this.hash() === this.txId) &&\r\n\r\n                // The signature is a 64-byte hex value and the signature is a valid sig of the hash from the source\r\n                (hexToBytes(this.signature).length === 64) &&\r\n                await ed.verify(this.signature, this.txId, this.source)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Seal the transaction, setting the source and timestamp and signing it with the account object provided.\r\n    // The account object needs to provide an `async getPubKeyHex()` and `async sign()` function\r\n    async seal(account) {\r\n        this.source = await account.getPubKeyHex();\r\n        this.timestamp = new Date();\r\n        this.txId = this.hash();\r\n        this.signature = bytesToHex(await account.sign(this.txId));\r\n    }\r\n}\r\n\r\nexport class RealBadBlock {\r\n    prevHash = '00'.repeat(32); // Hash of previous block. It is included in this block to form a block-chain.\r\n    blockHeight = 0;            // How far we are \"above\" the genesis block. This is previous block's height + 1.\r\n    timestamp = null;           // Time of last update to the block (prior to hash computation). This is mainly for display purposes.\r\n    transactions = [];          // List of all transactions in the block\r\n    miningReward = 100;         // Base reward claimed for mining this block\r\n    rewardDestination = null;   // Miner's destination account ID (public key) for mining reward and transaction fees.\r\n    difficulty = 256**2;        // Required difficulty for hash. Increasing this makes it harder to find a valid hash. For example, setting this to 256**N will require the top N bytes of the hash to be zeros.\r\n    nonce = 0;                  // Number that can be changed to cause block's hash to vary\r\n\r\n    // Compute the hash of this object\r\n    // NOTE: We don't STORE the hash of the object inside the object because this\r\n    //       isn't a signed object so we can't trust the validity of any hash that\r\n    //       is TOLD to us! We have to check it ourselves!\r\n    get hash() {\r\n        let block_val = JSON.stringify(this);\r\n        return bytesToHex(sha256(block_val));\r\n    }\r\n\r\n    static difficultyMetric(h) {\r\n        // The difficulty metric is proportional to how low the hash is relative to the \"zero difficulty\" level.\r\n        // The lower the hash as an integer, the bigger the difficulty.\r\n        let zeroDifficulty = 1n << 256n;\r\n        let hashAsInt = hexToBigint(h);\r\n        return zeroDifficulty / hashAsInt;\r\n    }\r\n\r\n    isSealed(minDifficulty = 256**2) {\r\n        let difficulty = Math.max(minDifficulty, this.difficulty);\r\n        let maxHash = (1n << 256n) / BigInt(difficulty);\r\n        let hashAsInt = hexToBigint(this.hash);\r\n        return hashAsInt < maxHash;\r\n    }\r\n\r\n    // Increment the nonce and keep trying to find a hash that is valid.\r\n    // Try up to num_attempts times before giving up.\r\n    tryToSeal(num_attempts) {\r\n        let maxHash = (1n << 256n) / BigInt(this.difficulty);\r\n        this.timestamp = new Date();\r\n\r\n        for (let i = 0; i < num_attempts; i++) {\r\n            let hash = this.hash;\r\n            let hashAsInt = hexToBigint(hash);\r\n            if (hashAsInt < maxHash) {\r\n                return this.isSealed(this.difficulty);\r\n            }\r\n            // We post-increment the nonce, so that repeated calls to this function don't waste any work.\r\n            this.nonce++;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Accept an object and attempt to convert it into an object of this type.\r\n    // Return null if it doesn't work.\r\n    // The resulting object is not guaranteed to be valid!\r\n    static coerce({\r\n        prevHash,\r\n        blockHeight,\r\n        timestamp,\r\n        transactions,\r\n        miningReward,\r\n        rewardDestination,\r\n        difficulty,\r\n        nonce,\r\n    }) {\r\n        try {\r\n            let r = new RealBadBlock();\r\n            r.prevHash = prevHash;\r\n            r.blockHeight = blockHeight;\r\n            r.timestamp = new Date(timestamp);\r\n            r.transactions = transactions.map((t)=>{\r\n                return RealBadTransaction.coerce(t)\r\n            });\r\n            r.miningReward = miningReward;\r\n            r.rewardDestination = rewardDestination;\r\n            r.difficulty = difficulty;\r\n            r.nonce = nonce;\r\n\r\n            return r;\r\n        } catch (error) {\r\n            console.error(error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // Check that the block is sealed properly and confirm that all fields have correct non-null data types.\r\n    // This also checks that every Transaction in the block is correctly signed.\r\n    // NOTE: This does NOT mean that the Transactions are ALLOWED and CORRECT. That has to\r\n    //       be validated at the \"block chain\" level!\r\n    async isValid(minDifficulty = 256**2) {\r\n        try {\r\n            return (\r\n                // First check if the block is sealed, which will allow us to skip the work of detailed checks.\r\n                // This helps prevent us from getting spammed by garbage blocks and causing a DoS, since we can\r\n                // quickly check the seal but the seal takes a long time to make!\r\n                this.isSealed(minDifficulty)\r\n                // Note: isSealed() validates the hash quality, after which we don't care about \"difficulty\" or\r\n                //       \"nonce\" so we can skip those fields from now on.\r\n\r\n                // The previous block hash is a 32-byte hex value\r\n                && (hexToBytes(this.prevHash).length === 32)\r\n\r\n                // The blockHeight is a non-negative integer\r\n                && Number.isInteger(this.blockHeight)\r\n                && this.blockHeight >= 0\r\n\r\n                // If the blockHeight is 0, the previous hash should be all 0's as well:\r\n                && (\r\n                    this.blockHeight > 0 ||\r\n                    (this.prevHash === '00'.repeat(32))\r\n                )\r\n\r\n                // The timestamp is a Date object and contains a valid value\r\n                && (this.timestamp instanceof Date)\r\n                && !isNaN(this.timestamp.getTime())\r\n\r\n                // All the transactions have valid signatures and contain correct data types\r\n                && Array.isArray(this.transactions)\r\n                && asyncEvery(this.transactions, async(t)=>{\r\n                    return (t instanceof RealBadTransaction) && await t.isValid();\r\n                })\r\n\r\n                // The mining reward is a non-negative finite number\r\n                && Number.isFinite(this.miningReward)\r\n                && (this.miningReward >= 0)\r\n\r\n                // The reward address is a 32-byte hex value\r\n                && (hexToBytes(this.rewardDestination).length === 32)\r\n            );\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n","// Import the data types for manipulating coin stuff\r\nimport {\r\n    RealBadCoinTransfer,\r\n    RealBadNftMint,\r\n    RealBadNftTransfer,\r\n    RealBadTransaction,\r\n    RealBadBlock\r\n} from './RealBadCoin.tsx';\r\n\r\nimport { hexToBigint, bigintToHex } from 'bigint-conversion';\r\n\r\nimport { EventEmitter } from 'events';\r\n\r\nexport class RealBadAccountState {\r\n    balance = 0;\r\n    nonce = 0;\r\n\r\n    static coerce({\r\n        balance,\r\n        nonce,\r\n    }) {\r\n        let r = new RealBadAccountState();\r\n        r.balance = balance;\r\n        r.nonce = nonce;\r\n        return r;\r\n    }\r\n}\r\n\r\nexport class RealBadNftState {\r\n    owner = null;\r\n    nonce = 0;\r\n\r\n    static coerce({\r\n        owner,\r\n        nonce,\r\n    }) {\r\n        let r = new RealBadNftState();\r\n        r.owner = owner;\r\n        r.nonce = nonce;\r\n        return r;\r\n    }\r\n}\r\n\r\n// Exception thrown when \r\nexport class RealBadInvalidTransaction {\r\n    message = \"\";\r\n    transaction = null;\r\n\r\n    constructor(message, transaction) {\r\n        this.message = message;\r\n        this.transaction = transaction;\r\n    }\r\n\r\n    toString() {\r\n      return \"Bad Transaction:\\n\" + this.message + \"\\n\" + this.transaction.toString();\r\n    };\r\n}\r\n\r\n// This represents the state of the ledger at any given point\r\nexport class RealBadLedgerState {\r\n    accounts = {};  // List of \"accountId:RealBadAccountState\" pairs.\r\n    nfts = {};      // List of \"nftId:RealBadNftState\" pairs.\r\n    transactionFees = 0;\r\n\r\n    // Initialize the \"last block\" info with the \"pre-genesis block\"\r\n    lastBlockHash = '00'.repeat(32);\r\n    lastBlockHeight = -1;\r\n\r\n    // This is the target difficulty, based on the timestamps from the last 10 blocks\r\n    nextBlockDifficulty = null;\r\n    lastBlockTimestamp = null;\r\n    lastRetarget = null;\r\n\r\n    // This is the sum of all difficulty metrics for all blocks in the chain leading up to this state.\r\n    // It is used to determine which chain represents the highest block.\r\n    totalDifficulty = 0n;\r\n\r\n    static coerce({\r\n        accounts,\r\n        nfts,\r\n        transactionFees,\r\n        lastBlockHash,\r\n        lastBlockHeight,\r\n        nextBlockDifficulty,\r\n        lastBlockTimestamp,\r\n        lastRetarget,\r\n        totalDifficulty,\r\n    }) {\r\n        let r = new RealBadLedgerState();\r\n        Object.keys(accounts).forEach(k=>{\r\n            r.accounts[k] = RealBadAccountState.coerce(accounts[k]);\r\n        });\r\n        Object.keys(nfts).forEach(k=>{\r\n            r.nfts[k] = RealBadNftState.coerce(nfts[k]);\r\n        });\r\n        r.transactionFees = transactionFees;\r\n        r.lastBlockHash = lastBlockHash;\r\n        r.lastBlockHeight = lastBlockHeight;\r\n        r.nextBlockDifficulty = nextBlockDifficulty;\r\n        r.lastBlockTimestamp = lastBlockTimestamp;\r\n        r.lastRetarget = lastRetarget;\r\n        r.totalDifficulty = totalDifficulty;\r\n        return r;\r\n    }\r\n\r\n    // Return a deep copy clone of the state\r\n    clone() {\r\n        // Shallow copy first:\r\n        let copy = Object.assign({}, this);\r\n        // JSON doesn't know what to do with BigInt, so we have to help it\r\n        copy.totalDifficulty = bigintToHex(copy.totalDifficulty);\r\n        // Force a total deep copy:\r\n        copy = RealBadLedgerState.coerce(JSON.parse(JSON.stringify(copy)));\r\n        // Fix totalDifficulty back:\r\n        copy.totalDifficulty = hexToBigint(copy.totalDifficulty);\r\n        return copy;\r\n    }\r\n\r\n    // Try and apply a transaction to the current state\r\n    // Raises exception and doesn't change the state if it creates an unpermissible condition\r\n    // Assumes that you've already checked that the transaction is VALID!\r\n    tryTransaction(t) {\r\n        if (t.txData instanceof RealBadCoinTransfer) {\r\n            if (!(t.source in this.accounts)) throw new RealBadInvalidTransaction(\"Account tried to send coins before it existed\", t);\r\n            if (t.sourceNonce !== this.accounts[t.source].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect nonce\", t);\r\n            if (t.txData.amount + t.transactionFee > this.accounts[t.source].balance) throw new RealBadInvalidTransaction(\"Insufficient balance\", t);\r\n\r\n            // Consume the money spent from this account:\r\n            this.accounts[t.source].nonce++;\r\n            this.accounts[t.source].balance -= t.txData.amount + t.transactionFee;\r\n\r\n            // Give the money to the other accounts, creating them if needed:\r\n            this.transactionFees += t.transactionFee;\r\n            if (!(t.txData.destination in this.accounts)) this.accounts[t.txData.destination] = new RealBadAccountState();\r\n            this.accounts[t.txData.destination].balance += t.txData.amount;\r\n        }\r\n        else if (t.txData instanceof RealBadNftMint) {\r\n            // See if the NFT already exists\r\n            if (t.txData.nftId in this.nfts) throw new RealBadInvalidTransaction(\"NFT Mint attempted on already-existing NFT ID\", t);\r\n\r\n            // Accounts only have to exist and have coins if they are paying a Tx fee.\r\n            // Otherwise they don't need to exist and they also don't increment their nonce!\r\n            if (t.transactionFee > 0) {\r\n                if (!(t.source in this.accounts)) throw new RealBadInvalidTransaction(\"Account tried to pay NFT Mint txFee before it existed\", t);\r\n                if (t.sourceNonce !== this.accounts[t.source].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect nonce for NFT Mint txFee\", t);\r\n                if (t.transactionFee > this.accounts[t.source].balance) throw new RealBadInvalidTransaction(\"Insufficient balance for NFT Mint txFee\", t);\r\n            }\r\n\r\n            if (t.transactionFee > 0) {\r\n                // Consume the money spent from this account and increment the nonce:\r\n                this.accounts[t.source].nonce++;\r\n                this.accounts[t.source].balance -= t.transactionFee;\r\n\r\n                // Accept the transaction fee:\r\n                this.transactionFees += t.transactionFee;\r\n            }\r\n\r\n            // Create the NFT and claim it for this account\r\n            let nft = new RealBadNftState();\r\n            nft.nonce = 0;\r\n            nft.owner = t.source;\r\n            this.nfts[t.txData.nftId] = nft;\r\n        }\r\n        else if (t.txData instanceof RealBadNftTransfer) {\r\n            let nftid = t.txData.nftId;\r\n            if (!(nftid in this.nfts)) throw new RealBadInvalidTransaction(\"NFT Transfer attempted on non-existent NFT ID\", t);\r\n            if (this.nfts[nftid].owner !== t.source) throw new RealBadInvalidTransaction(\"NFT Transfer attempted by non-owner of NFT\", t);\r\n            if (t.txData.nftNonce !== this.nfts[nftid].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect NFT nonce\", t);\r\n\r\n            // Accounts only have to exist and have coins if they are paying a Tx fee.\r\n            // Otherwise they don't need to exist and they also don't increment their nonce!\r\n            if (t.transactionFee > 0) {\r\n                if (!(t.source in this.accounts)) throw new RealBadInvalidTransaction(\"Account tried to pay NFT Mint txFee before it existed\", t);\r\n                if (t.sourceNonce !== this.accounts[t.source].nonce + 1) throw new RealBadInvalidTransaction(\"Incorrect nonce for NFT Mint txFee\", t);\r\n                if (t.transactionFee > this.accounts[t.source].balance) throw new RealBadInvalidTransaction(\"Insufficient balance for NFT Mint txFee\", t);\r\n            }\r\n\r\n            if (t.transactionFee > 0) {\r\n                // Consume the money spent from this account and increment the nonce:\r\n                this.accounts[t.source].nonce++;\r\n                this.accounts[t.source].balance -= t.transactionFee;\r\n\r\n                // Accept the transaction fee:\r\n                this.transactionFees += t.transactionFee;\r\n            }\r\n\r\n            // Enjoy your shiny new NFT!\r\n            this.nfts[nftid].nonce++;\r\n            this.nfts[nftid].owner = t.txData.destination;\r\n        }\r\n    }\r\n\r\n    // Try and apply a block to the current state\r\n    // Returns a new RealBadLedgerState with the block applied if successful. Otherwise returns null.\r\n    // Assumes that you've already checked that the block is VALID and that you approve of the mining reward amount!\r\n    applyBlock(block) {\r\n        // Make a deep copy of ourselves\r\n        let s = this.clone();\r\n\r\n        // First just check if the new block fits as the next block in the block chain\r\n        if (block.prevHash !== this.lastBlockHash) return null;\r\n        if (block.blockHeight !== this.lastBlockHeight + 1) return null;\r\n        if (block.timestamp > new Date()) return null; // No blocks from the future!\r\n        if ((block.blockHeight !== 0) && (block.timestamp < this.lastBlockTimestamp)) return null; // Block timestamps must be monotonically increasing!\r\n\r\n        s.lastBlockHash = block.hash;\r\n        s.lastBlockHeight = block.blockHeight;\r\n        s.lastBlockTimestamp = block.timestamp;\r\n\r\n        // The difficulty metric is proportional to how low the hash is relative to the \"zero difficulty\" level.\r\n        // The lower the hash as an integer, the bigger the difficulty.\r\n        // When you sum this metric from two blocks, it is equivalent to having solved one block with twice the difficulty.\r\n        s.totalDifficulty = this.totalDifficulty + RealBadBlock.difficultyMetric(s.lastBlockHash);\r\n\r\n        // Check if they tried hard enough\r\n        if (block.difficulty < this.nextBlockDifficulty) return null; // They didn't try and hit the target difficulty!\r\n\r\n        // Re-target the difficulty if the next block is a multiple of 10 blocks:\r\n        s.nextBlockDifficulty = this.nextBlockDifficulty ?? block.difficulty;\r\n        s.lastRetarget = this.lastRetarget ?? block.timestamp;\r\n        if ((block.blockHeight + 1) % 10 === 0) {\r\n            let gap = block.timestamp - s.lastRetarget;\r\n            s.lastRetarget = block.timestamp;\r\n            let gapTarget = 10 * (15 * 1000); // Target in milliseconds for 10 blocks to be created\r\n            let difficultyError = gap / gapTarget;\r\n            console.log(\"Retargetting difficultyError = \" + difficultyError);\r\n            s.nextBlockDifficulty = Math.round(s.nextBlockDifficulty / difficultyError);\r\n        }\r\n\r\n        // Attempt to apply all the transactions\r\n        try {\r\n            block.transactions.forEach(t => {\r\n                s.tryTransaction(t);\r\n            });\r\n        } catch (error) {\r\n            console.error(error);\r\n            return null;\r\n        }\r\n\r\n        // If successful, pay the mining rewards, including the sum of transactionFees from all transactions.\r\n        if (!(block.rewardDestination in s.accounts)) s.accounts[block.rewardDestination] = new RealBadAccountState();\r\n        s.accounts[block.rewardDestination].balance += block.miningReward + s.transactionFees;\r\n\r\n        // Clear out transaction fees now that they are claimed\r\n        s.transactionFees = 0;\r\n\r\n        return s;\r\n    }\r\n}\r\n\r\n// Keep track of a set of blocks and provide helper functions for identifying the longest chain, etc.\r\n// NOTE: This is a LOCAL data structure and is not something that can be trusted if it is sent from elsewhere!\r\nexport class RealBadCache {\r\n    _blocks = {};               // Key/value pairs with key as block hash and full state of system as the value\r\n    _anticipatedBlocks = {};    // Key/value pairs with key as \"prevHash\" for blocks that don't exist in our cache yet, and value as a list of blocks waiting on them to arrive.\r\n    _readyBlocks = [];          // List of hashes of blocks that are marked as \"ready for processing state\". They are pulled from _anticipatedBlocks once their ancestor is done processing.\r\n    _bestBlock = null;          // Hash of the top-scoring block (i.e. the one with the deepest block chain \"strength\")\r\n    minDifficulty = 256**2;     // Minimum difficulty level of blocks to allow into our cache.\r\n    _updateNotifier = new EventEmitter();\r\n\r\n    // Add subscribe/unsub options for tracking when new blocks arrive\r\n    subscribe(callback) {\r\n        this._updateNotifier.addListener('new_block', callback);\r\n    }\r\n\r\n    unsubscribe(callback) {\r\n        this._updateNotifier.removeListener('new_block', callback);\r\n    }\r\n\r\n    // Only accept good RealBadBlocks into our cache!\r\n    addBlock(block, source, wasRequested, minDifficulty=this.minDifficulty) {\r\n        try {\r\n            let hash = block.hash; // Save us the trouble of recomputing this tons of times!\r\n            if (\r\n                // Make sure its a valid sealed block\r\n                (block instanceof RealBadBlock)\r\n                && block.isValid(minDifficulty)\r\n\r\n                // Also make sure we haven't seen it before\r\n                && !(hash in this._blocks)\r\n            ) {\r\n                // This is a new block, so create the info object with just the block and originator for now.\r\n                this._blocks[hash] = {\r\n                    block: block,\r\n                    source: source,\r\n                };\r\n\r\n                // Check if this block is a genesis block or is linked to a block with a valid already-computed state\r\n                if ((block.blockHeight === 0) || ((block.prevHash in this._blocks) && (\"state\" in this._blocks[block.prevHash]))) {\r\n                    this._readyBlocks.push(hash);\r\n                }\r\n                else {\r\n                    // Otherwise (can't compute the state yet), add this block to the \"watch list\" for later computation\r\n                    // once we fill in the missing links.\r\n                    if (!(block.prevHash in this._anticipatedBlocks)) this._anticipatedBlocks[block.prevHash] = [];\r\n                    this._anticipatedBlocks[block.prevHash].push(hash);\r\n\r\n                    if (this._readyBlocks.length) console.error(\"Expected _readyBlocks to be empty but there were \" + this._readyBlocks.length);\r\n                }\r\n\r\n                // Update all the blocks in the ready list\r\n                // Note that updating them might add new ones to the ready list by pulling them from _anticipatedBlocks.\r\n                // We update those too until we run out.\r\n                while (this._readyBlocks.length) {\r\n                    let b = this.getBlock(this._readyBlocks.pop());\r\n                    let h = b.hash;\r\n\r\n                    if (b.blockHeight === 0) {\r\n                        // Genesis block!\r\n                        this._blocks[h].state = (new RealBadLedgerState()).applyBlock(b);\r\n                    }\r\n                    // ASSUMPTION: Unless this is a genesis block, if it got into _readyBlocks then it's prevHash *is available* in our block cache!\r\n                    else if (this._blocks[b.prevHash].state === null) {\r\n                        // The previous state might be null, which means the chain was a bad state.\r\n                        // This is fine - just propagates this to all children blocks. But that's still a \"valid state\".\r\n                        this._blocks[h].state = null;\r\n                    }\r\n                    else {\r\n                        // Yep, we can compute its new state based on its old one.\r\n                        // The new state might be null if this block is bad.\r\n                        this._blocks[h].state = this._blocks[b.prevHash].state.applyBlock(b);\r\n                    }\r\n\r\n                    // Now that we updated a block, see if this lets us update any others, which will have us repeat the loop again.\r\n                    if (h in this._anticipatedBlocks) {\r\n                        this._readyBlocks = this._readyBlocks.concat(this._anticipatedBlocks[h]);\r\n                        delete this._anticipatedBlocks[h];\r\n                    }\r\n\r\n                    // Also now that we updated a block, see if it is now the \"best block\".\r\n                    // This is the only place where we need to check for those updates, because we just added new state that we didn't have before.\r\n                    // NOTE: The \"best\" chain is weighed based on total difficulty to create it, rather than block height!\r\n                    //       Block height is just a human-readable metric and is used to detect genesis blocks.\r\n                    let thisState = this.getState(h);\r\n                    if (thisState !== null) {\r\n                        let bestState = this.getState(this._bestBlock);\r\n                        if (\r\n                            (bestState === null) ||\r\n                            (thisState.totalDifficulty > bestState.totalDifficulty)\r\n                        ) {\r\n                            this._bestBlock = h;\r\n                        }\r\n                    }\r\n                }\r\n                this._updateNotifier.emit('new_block', hash, wasRequested);\r\n                return true;\r\n            }\r\n        } catch (error) {\r\n            console.error(error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Return hash of the best block that we know about:\r\n    get bestBlockHash() {\r\n        return this._bestBlock;\r\n    }\r\n\r\n    getBlock(hash) {\r\n        if (hash in this._blocks) {\r\n            return this._blocks[hash].block;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getSource(hash) {\r\n        if (hash in this._blocks) {\r\n            return this._blocks[hash].source;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getState(hash) {\r\n        if ((hash in this._blocks) && (\"state\" in this._blocks[hash])) {\r\n            return this._blocks[hash].state;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    // Return list with all blocks in the chain.\r\n    // Stops when it runs out of previous blocks (or hits a genesis block).\r\n    // Also stops early when it hits rootHash if that is part of the chain.\r\n    getChain(hash, rootHash=null) {\r\n        let chain = [];\r\n        let currHash = hash;\r\n        let currBlock = this.getBlock(currHash);\r\n\r\n        while ((currHash !== rootHash) && (currBlock !== null)) {\r\n            chain.unshift(currHash);\r\n\r\n            // Stop when we hit genesis block\r\n            if (currBlock.blockHeight === 0) break;\r\n\r\n            currHash = currBlock.prevHash;\r\n            currBlock = this.getBlock(currHash);\r\n        }\r\n\r\n        return chain;\r\n    }\r\n}\r\n","// This is a background thread that will manage the validation and storage of\r\n// blocks, to offload the work from the UI thread\r\nimport * as Comlink from 'comlink';\r\n\r\nimport {\r\n    RealBadBlock\r\n} from './RealBadCoin.tsx';\r\n\r\nimport {\r\n    RealBadCache\r\n} from './RealBadState.tsx';\r\n\r\nclass CacheWorker {\r\n    #cache = new RealBadCache();\r\n\r\n    // Validate and possibly add a block to the cache\r\n    addBlock(block, source) {\r\n        let b = RealBadBlock.coerce(block);\r\n        return this.#cache.addBlock(b, source);\r\n    }\r\n\r\n    // Validate and possibly add a list of blocks to the cache\r\n    addBlocks(blockList, source) {\r\n        return blockList.map((b, i)=>this.addBlock(b, source));\r\n    }\r\n\r\n    // Return all the info about one block from the cache\r\n    getBlockInfo(hash) {\r\n        return {\r\n            block: this.#cache.getBlock(hash),\r\n            state: this.#cache.getState(hash),\r\n            source: this.#cache.getSource(hash),\r\n        };\r\n    }\r\n\r\n    // Get a list of blocks (just the blocks, not full info!) matching the list of hashes.\r\n    getBlocks(hashList) {\r\n        return hashList.map((h, i)=>this.#cache.getBlock(h));\r\n    }\r\n\r\n    // Get the list of hashes comprising the chain, starting at `hash` and going\r\n    // backward until `rootHash` is found (or a genesis block, or a block with no parent).\r\n    // If topHash is null or undefined, then we start at the \"best\" hash.\r\n    getChain(hash, rootHash) {\r\n        return this.#cache.getChain(hash, rootHash);\r\n    }\r\n\r\n    // Return the hash of the top of the \"best chain\" that we know about\r\n    get bestBlockHash() {\r\n        return this.#cache.bestBlockHash;\r\n    }\r\n}\r\n\r\nComlink.expose(CacheWorker);\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = () => {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [974,482], () => (__webpack_require__(2455)))\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = (chunkId) => {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce((promises, key) => {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = (chunkId) => {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + {\"482\":\"d67f4f5e\",\"974\":\"eeffc38f\"}[chunkId] + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = (chunkId) => {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t475: 1\n};\n\n// importScripts chunk loading\nvar installChunk = (data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = (chunkId, promises) => {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkrealbadcoin\"] = self[\"webpackChunkrealbadcoin\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = () => {\n\treturn Promise.all([\n\t\t__webpack_require__.e(974),\n\t\t__webpack_require__.e(482)\n\t]).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["RealBadCoinTransfer","type","destination","amount","r","isValid","this","hexToBytes","length","Number","isFinite","RealBadNftMint","nftData","nftId","hash","bytesToHex","sha256","JSON","stringify","RealBadNftTransfer","nftNonce","isInteger","RealBadTransaction","source","sourceNonce","timestamp","transactionFee","txData","txId","signature","tx_val","Date","coerce","isNaN","getTime","ed","account","getPubKeyHex","sign","RealBadBlock","prevHash","repeat","blockHeight","transactions","miningReward","rewardDestination","difficulty","nonce","block_val","h","hexToBigint","isSealed","minDifficulty","Math","max","maxHash","BigInt","tryToSeal","num_attempts","i","map","t","error","console","Array","isArray","async","arr","predicate","e","asyncEvery","RealBadAccountState","balance","RealBadNftState","owner","RealBadInvalidTransaction","constructor","message","transaction","toString","RealBadLedgerState","accounts","nfts","transactionFees","lastBlockHash","lastBlockHeight","nextBlockDifficulty","lastBlockTimestamp","lastRetarget","totalDifficulty","Object","keys","forEach","k","clone","copy","assign","bigintToHex","parse","tryTransaction","nft","nftid","applyBlock","block","s","difficultyMetric","gap","difficultyError","log","round","RealBadCache","_blocks","_anticipatedBlocks","_readyBlocks","_bestBlock","_updateNotifier","EventEmitter","subscribe","callback","addListener","unsubscribe","removeListener","addBlock","wasRequested","push","b","getBlock","pop","state","concat","thisState","getState","bestState","emit","bestBlockHash","getSource","getChain","rootHash","chain","currHash","currBlock","unshift","Comlink","addBlocks","blockList","getBlockInfo","getBlocks","hashList","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","x","__webpack_exports__","O","deferred","result","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","key","splice","d","definition","o","defineProperty","enumerable","get","f","chunkId","Promise","all","reduce","promises","u","miniCssF","obj","prop","prototype","hasOwnProperty","call","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","data","moreModules","runtime","next","then"],"sourceRoot":""}